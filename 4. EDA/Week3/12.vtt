WEBVTT

1
00:00:00.820 --> 00:00:03.220
还有一些可能对你有用的函数

2
00:00:03.220 --> 00:00:07.370
第一个是 rgb()

3
00:00:07.370 --> 00:00:10.610
这个函数包含红色、绿色和蓝色的参数

4
00:00:10.610 --> 00:00:14.690
三种颜色的参数范围都是从0到1

5
00:00:14.690 --> 00:00:21.125
它会返回一个十六进制的字符串 可以传递到 image 或者 plot 函数中

6
00:00:21.125 --> 00:00:26.230
所以如果你想把十进制的红绿蓝数值转换成十六进制字符串的话

7
00:00:26.230 --> 00:00:28.970
所以如果你想把十进制的红绿蓝数值转换成十六进制字符串的话

8
00:00:28.970 --> 00:00:32.900
可以使用 rgb 函数

9
00:00:32.900 --> 00:00:36.380
rgb 函数的另一个功能是为颜色添加透明度

10
00:00:36.380 --> 00:00:39.710
所以 rgb 函数有第四个范围从0到1的参数

11
00:00:39.710 --> 00:00:42.200
那就是 alpha 参数

12
00:00:42.200 --> 00:00:46.840
这个参数可以用于指定颜色的透明度

13
00:00:46.840 --> 00:00:49.090
0表示最透明的程度

14
00:00:49.090 --> 00:00:51.730
基本上就是全透明 而1则表示完全不透明

15
00:00:51.730 --> 00:00:53.010
基本上就是全透明 而1则表示完全不透明

16
00:00:53.010 --> 00:00:56.000
最后我顺带提一下 colorspace 包

17
00:00:56.000 --> 00:00:59.860
这个包可以对颜色进行另一种类型的操作

18
00:00:59.860 --> 00:01:01.980
你可能会想多了解一些它的功能 但在这里我就不讲解了

19
00:01:03.950 --> 00:01:06.790
下面是透明度的一个简单例子

20
00:01:06.790 --> 00:01:10.390
这里是一幅绘有一千个点的图

21
00:01:10.390 --> 00:01:12.450
你可以看到 在高密度区域

22
00:01:12.450 --> 00:01:16.620
我这里使用的是 pch=19 所以显示出来的是实心圆圈

23
00:01:16.620 --> 00:01:16.780
在高密度区域 所有的点相互重叠

24
00:01:16.780 --> 00:01:19.900
在高密度区域 所有的点相互重叠

25
00:01:19.900 --> 00:01:23.169
所以你在中间会看到一片黑色

26
00:01:23.169 --> 00:01:27.480
要区分出不同的点是比较困难的

27
00:01:27.480 --> 00:01:32.130
因为这些点全都叠在一起 所以分不清

28
00:01:32.130 --> 00:01:36.160
如果我在 plot 函数里加入一些透明度的话

29
00:01:36.160 --> 00:01:38.239
你会看到这些圆变透明了 当它们相互重叠的时候

30
00:01:38.239 --> 00:01:40.295
你好像可以透过它们看到下面的点

31
00:01:40.295 --> 00:01:41.800
在很多点重叠的区域 颜色会更深

32
00:01:41.800 --> 00:01:45.910
在很多点重叠的区域 颜色会更深

33
00:01:45.910 --> 00:01:47.510
而在没有点重合的区域你则会看到一个透明的圆

34
00:01:47.510 --> 00:01:49.790
而在没有点重合的区域你则会看到一个透明的圆

35
00:01:49.790 --> 00:01:54.570
在下面 我给出了创建这幅图所用的代码

36
00:01:54.570 --> 00:01:58.030
我在这里声明 alpha 的值为0.2

37
00:01:58.030 --> 00:02:01.330
而红色、绿色和蓝色的值都是0 所以是黑色

38
00:02:01.330 --> 00:02:06.315
因为0.2非常靠近0 所以透明度相当高

39
00:02:06.315 --> 00:02:10.080
你可以看到 利用透明度可以简单便捷地

40
00:02:10.080 --> 00:02:13.570
实现直方图预测 (histogram estimator) 之类的效果

41
00:02:13.570 --> 00:02:18.210
因为颜色越深的地方就代表密度更高的区域

42
00:02:18.210 --> 00:02:22.040
而颜色越浅的地方就代表密度更低的区域

43
00:02:22.040 --> 00:02:25.580
所以如果你的图上有很多不同的点 加上一点透明度

44
00:02:25.580 --> 00:02:28.430
你就可以获得多一点的信息

45
00:02:31.760 --> 00:02:34.220
这只是在 R 中使用颜色和透明度的基础介绍

46
00:02:34.220 --> 00:02:36.660
这只是在 R 中使用颜色和透明度的基础介绍

47
00:02:36.660 --> 00:02:39.530
我认为在制作图表、地图或者其它类型的图时

48
00:02:39.530 --> 00:02:42.380
适当地利用颜色

49
00:02:42.380 --> 00:02:44.420
可以让读者更容易理解你想表达的内容

50
00:02:44.420 --> 00:02:47.060
或者看到你想要做的对比

51
00:02:47.060 --> 00:02:52.050
而且我认为使用一组良好的颜色是很重要的

52
00:02:52.050 --> 00:02:53.890
尤其是用渐变色描述有顺序的数据

53
00:02:53.890 --> 00:02:57.070
用对比色描述相互分歧的数据

54
00:02:57.070 --> 00:02:59.690
RColorBrewer 包是一个非常有用的包

55
00:02:59.690 --> 00:03:02.040
你可以在 CRAN (镜像站) 下载

56
00:03:02.040 --> 00:03:04.620
这个包为不同类型的数据提供了一些颜色组合方案

57
00:03:04.620 --> 00:03:07.400
这个包为不同类型的数据提供了一些颜色组合方案

58
00:03:07.400 --> 00:03:09.550
colorRamp() 和 colorRampPalette() 是用来混合颜色的基本函数

59
00:03:09.550 --> 00:03:13.360
colorRamp() 和 colorRampPalette() 是用来混合颜色的基本函数

60
00:03:13.360 --> 00:03:15.870
尤其是当你使用 RColorBrewer 包

61
00:03:15.870 --> 00:03:19.100
并且希望从给出的调色盘中混合颜色时

62
00:03:20.480 --> 00:03:22.160
最后 透明度是十分有用的

63
00:03:22.160 --> 00:03:26.460
因为它可以使颜色透明化

64
00:03:26.460 --> 00:03:28.460
从而分清那些互相重叠的点

65
00:03:28.460 --> 00:03:30.550
【教育无边界字幕组】詹詹詹米 | hazard1990 | HikaruSama