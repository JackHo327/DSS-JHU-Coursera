WEBVTT

1
00:00:00.016 --> 00:00:02.150
你可能会想 那我怎么组成有意思的调色板？

2
00:00:02.150 --> 00:00:03.950
你可能会想 那我怎么组成有意思的调色板？

3
00:00:03.950 --> 00:00:06.180
你永远可以创造你自己的颜色组合

4
00:00:06.180 --> 00:00:07.670
就像我前面的演示一样

5
00:00:07.670 --> 00:00:10.390
指明红色、黄色

6
00:00:10.390 --> 00:00:13.610
或 colors 向量中的其它元素

7
00:00:13.610 --> 00:00:16.300
通过调用 colors 函数可以获得该向量

8
00:00:16.300 --> 00:00:19.670
但可能你想创造更多更有趣的调色板

9
00:00:19.670 --> 00:00:23.320
你可以使用 R 的 RColorBrewer 包

10
00:00:23.320 --> 00:00:25.030
RColorBrewer 包可以在 CRAN (镜像站) 下载

11
00:00:25.030 --> 00:00:28.420
RColorBrewer 包可以在 CRAN (镜像站) 下载

12
00:00:28.420 --> 00:00:32.320
它提供了一系列有趣的配色方案 可用于不同类型的数据

13
00:00:32.320 --> 00:00:34.380
这个包是在宾州州立大学辛西娅·布鲁尔 (Cynthia Brewer) 的研究基础上创建起来的

14
00:00:34.380 --> 00:00:36.330
这个包是在宾州州立大学辛西娅·布鲁尔 (Cynthia Brewer) 的研究基础上创建起来的

15
00:00:36.330 --> 00:00:40.470
她为研究适用于绘制地图以及标记地图数据的颜色做了大量的工作

16
00:00:40.470 --> 00:00:45.090
她为研究适用于绘制地图以及标记地图数据的颜色做了大量的工作

17
00:00:45.090 --> 00:00:47.280
但是这些调色板对于地图以外的数据

18
00:00:47.280 --> 00:00:50.030
也很合适

19
00:00:50.030 --> 00:00:54.140
你可以从 RColorBrewer 包里获得三种调色板

20
00:00:54.140 --> 00:00:57.906
分别是连续型调色板 (sequential palette) 、极端型调色板 (diverging palette)

21
00:00:57.906 --> 00:01:02.280
以及离散型调色板 (qualitative palette)

22
00:01:02.280 --> 00:01:05.240
连续型调色板适用于有序的数据

23
00:01:05.240 --> 00:01:08.434
比如用于数值型或者连续的数据上

24
00:01:08.434 --> 00:01:10.330
其实也不一定要连续 只要数据从低到高排列过就好

25
00:01:10.330 --> 00:01:12.500
其实也不一定要连续 只要数据从低到高排列过就好

26
00:01:13.700 --> 00:01:15.080
极端型调色板可以用在那些分化的

27
00:01:15.080 --> 00:01:20.210
或者偏离某些东西的数据上

28
00:01:20.210 --> 00:01:22.170
比如说 你有一堆数据

29
00:01:22.170 --> 00:01:25.480
你想表现出数据与其平均值的偏差

30
00:01:25.480 --> 00:01:27.250
在这种情况下 这些数据可能有正有负

31
00:01:27.250 --> 00:01:30.550
在这种情况下 这些数据可能有正有负

32
00:01:30.550 --> 00:01:32.810
这些数据以某个点为中心向外发散

33
00:01:32.810 --> 00:01:34.430
这些数据以某个点为中心向外发散

34
00:01:34.430 --> 00:01:36.300
这个中心点可能是 0

35
00:01:36.300 --> 00:01:39.260
然后数据向正负两个方向增大

36
00:01:39.260 --> 00:01:40.330
这就是分化的数据

37
00:01:40.330 --> 00:01:43.890
你可以用极端型调色板来表示这些数据

38
00:01:45.040 --> 00:01:47.130
最后一种是离散型调色板

39
00:01:47.130 --> 00:01:50.630
用于表示无序的数据

40
00:01:50.630 --> 00:01:54.200
可以是因子或者分类数据

41
00:01:54.200 --> 00:01:57.030
它们没有特定的顺序 只有不同的数值

42
00:01:57.030 --> 00:02:01.385
你从 RColorBrewer 包中获取的调色板信息

43
00:02:01.385 --> 00:02:05.415
可以直接传递给 colorRamp 和 colorRampPalette 函数使用

44
00:02:05.415 --> 00:02:07.210
然后应用在 R 的绘图函数里

45
00:02:09.360 --> 00:02:13.520
这些就是你能够在 RColorBrewer 包里面找到的调色板

46
00:02:13.520 --> 00:02:17.090
最上面是连续型调色板

47
00:02:17.090 --> 00:02:21.160
你可以看到 基本上从左到右颜色由浅变深

48
00:02:21.160 --> 00:02:24.392
每个调色板都有一系列的颜色

49
00:02:24.392 --> 00:02:28.150
比如最上面这个组合就从黄色渐变到橙色再到红色

50
00:02:28.150 --> 00:02:30.220
最下面这个叫 Blues 的颜色组合

51
00:02:30.220 --> 00:02:32.540
则是由浅蓝色渐变到深蓝色

52
00:02:32.540 --> 00:02:34.300
这些渐变颜色组合用在表示有序的数据

53
00:02:34.300 --> 00:02:36.430
有高低值差异的数值型数据上

54
00:02:37.868 --> 00:02:39.948
这里的第二组是离散型调色板

55
00:02:39.948 --> 00:02:43.900
它们用于表示分类数据

56
00:02:43.900 --> 00:02:45.280
你可以看到 调色板里的颜色并没有特定的顺序

57
00:02:45.280 --> 00:02:47.610
你可以看到 调色板里的颜色并没有特定的顺序

58
00:02:47.610 --> 00:02:49.390
这些颜色不是从浅到深变化

59
00:02:49.390 --> 00:02:52.620
这些颜色并没有任何特定的顺序

60
00:02:52.620 --> 00:02:54.590
它们只是一组特定的颜色

61
00:02:54.590 --> 00:02:58.730
每个颜色组合都有一个主题

62
00:02:58.730 --> 00:02:59.390
一些调色板比其它更醒目

63
00:02:59.390 --> 00:03:01.340
一些调色板比其它更醒目

64
00:03:01.340 --> 00:03:03.910
一些则更加柔和

65
00:03:03.910 --> 00:03:07.210
最后一组是极端型调色板

66
00:03:07.210 --> 00:03:10.160
你可以看到 这些颜色组合的中间都比较浅

67
00:03:10.160 --> 00:03:11.828
你可以看到 这些颜色组合的中间都比较浅

68
00:03:11.828 --> 00:03:17.460
左右两边都向不同的颜色变深

69
00:03:17.460 --> 00:03:18.510
你可以想象

70
00:03:18.510 --> 00:03:20.690
左边为负 右边为正

71
00:03:21.690 --> 00:03:24.100
它们就是这样分化的

72
00:03:24.100 --> 00:03:24.925
同样 这些颜色组合也包含不同的颜色

73
00:03:24.925 --> 00:03:26.720
同样 这些颜色组合也包含不同的颜色

74
00:03:26.720 --> 00:03:28.810
比如说最上面这一组

75
00:03:28.810 --> 00:03:33.290
从左边的红色开始 一直到右边类似蓝紫色的颜色

76
00:03:33.290 --> 00:03:36.090
而最下面这一个则是从左边的棕色开始

77
00:03:36.090 --> 00:03:39.670
到右边的蓝色或者绿色

78
00:03:39.670 --> 00:03:41.870
你可以根据你的喜好选择配色方案

79
00:03:41.870 --> 00:03:43.754
你可以根据你的喜好选择配色方案

80
00:03:43.754 --> 00:03:47.737
  你可以根据你的喜好选择配色方案

81
00:03:47.737 --> 00:03:51.100
使用 install.packages 函数安装好 RColorBrewer 包以后可以将其加载到库中

82
00:03:51.100 --> 00:03:53.106
使用 install.packages 函数安装好 RColorBrewer 包以后可以将其加载到库中

83
00:03:53.106 --> 00:03:55.865
通过 library(RColorBrewer) 实现

84
00:03:55.865 --> 00:03:58.637
brewer.pal() 是包里面唯一有用的函数

85
00:03:58.637 --> 00:04:02.128
这个函数接受两个参数

86
00:04:02.128 --> 00:04:05.420
第一个是在你的调色板中你想要的颜色数目

87
00:04:05.420 --> 00:04:08.200
一般来说这个数字比较小 比如 2、3 或者 4

88
00:04:08.200 --> 00:04:12.078
你的调色板中不需要很多原始颜色

89
00:04:12.078 --> 00:04:12.750
第二个参数是调色板的名称

90
00:04:12.750 --> 00:04:14.470
第二个参数是调色板的名称

91
00:04:14.470 --> 00:04:17.780
这些名字非常难记

92
00:04:17.780 --> 00:04:20.530
你可以查看 brewer.pal 函数的帮助页面

93
00:04:20.530 --> 00:04:23.240
上面列出了所有可以使用的调色板的名称

94
00:04:23.240 --> 00:04:25.840
在这里我用了一个蓝色-绿色类型的组合

95
00:04:27.280 --> 00:04:29.242
我想使用其中的三种颜色

96
00:04:29.242 --> 00:04:30.550
现在 你可以看到

97
00:04:30.550 --> 00:04:33.850
返回的字符向量里面有三种颜色

98
00:04:33.850 --> 00:04:37.750
每一种都包含红绿蓝三色 如果你熟悉十六进制的话

99
00:04:37.750 --> 00:04:39.340
你会知道这代表哪些数值

100
00:04:39.340 --> 00:04:43.020
但是具体知道这些值是什么其实并不十分重要

101
00:04:43.020 --> 00:04:44.930
因为你可以在屏幕上看到这些颜色

102
00:04:44.930 --> 00:04:46.480
接下来 我会把这个调色板传递给 colorRampPalette 函数

103
00:04:46.480 --> 00:04:50.774
接下来 我会把这个调色板传递给 colorRampPalette 函数

104
00:04:50.774 --> 00:04:53.910
这个函数会返回另一个函数 我起个名字叫 pal

105
00:04:53.910 --> 00:04:58.800
现在 我准备用 image 函数生成这个火山图像

106
00:04:58.800 --> 00:05:02.330
但是我不打算用“热颜色”或者“地形颜色”调色板

107
00:05:02.330 --> 00:05:06.730
我准备使用从 RColorBrewer 包里面得到的调色板

108
00:05:06.730 --> 00:05:09.970
我指定了这幅图像中要有 20 种不同的颜色

109
00:05:09.970 --> 00:05:13.360
我指定了这幅图像中要有 20 种不同的颜色

110
00:05:13.360 --> 00:05:14.944
因此会出现 20 种颜色

111
00:05:14.944 --> 00:05:18.000
它们是从这个蓝色-绿色调色板中插值而来

112
00:05:18.000 --> 00:05:20.210
最后的图像是这样子的

113
00:05:20.210 --> 00:05:23.540
你可以看见 海拔越高的地方 颜色越深越绿

114
00:05:23.540 --> 00:05:28.128
你可以看见 海拔越高的地方 颜色越深越绿

115
00:05:28.128 --> 00:05:30.605
海拔低的地方则更浅更蓝

116
00:05:30.605 --> 00:05:34.007
  海拔低的地方则更浅更蓝

117
00:05:34.007 --> 00:05:36.437
另一个可以使用 RColorBrewer 调色板的函数是 R 里面的 smoothScatter()

118
00:05:36.437 --> 00:05:38.830
另一个可以使用 RColorBrewer 调色板的函数是 R 里面的 smoothScatter()

119
00:05:38.830 --> 00:05:41.998
这个函数在一种情况下特别有用

120
00:05:41.998 --> 00:05:44.242
那就是当你想描绘很多不同且分散的点

121
00:05:44.242 --> 00:05:47.344
而你又不想在屏幕上显示一堆相互重叠的点的时候

122
00:05:47.344 --> 00:05:51.380
而你又不想在屏幕上显示一堆相互重叠的点的时候

123
00:05:51.380 --> 00:05:53.510
在这里 我画了一万个点

124
00:05:53.510 --> 00:05:55.490
如果我只是用 plot 函数把它们全部画出来的话

125
00:05:55.490 --> 00:05:59.050
我得到的就是一堆乱七八糟相互重叠的点

126
00:05:59.050 --> 00:06:00.918
难以看到细节

127
00:06:00.918 --> 00:06:03.120
smoothScatter 函数的作用是

128
00:06:03.120 --> 00:06:06.280
它会生成图中这些点的二维直方图

129
00:06:06.280 --> 00:06:07.760
它会生成图中这些点的二维直方图

130
00:06:07.760 --> 00:06:10.640
然后这个函数会使用一组固定的颜色描绘这幅直方图

131
00:06:10.640 --> 00:06:14.580
默认情况下这个函数使用的是 RColorBrewer 包里面的 Blues 调色板

132
00:06:14.580 --> 00:06:17.450
默认情况下这个函数使用的是 RColorBrewer 包里面的 Blues 调色板

133
00:06:17.450 --> 00:06:20.120
这是一个连续型调色板

134
00:06:20.120 --> 00:06:23.580
数值越高蓝色越深 反之蓝色越浅

135
00:06:23.580 --> 00:06:24.210
图中较深的蓝色区域代表密度大

136
00:06:24.210 --> 00:06:27.240
图中较深的蓝色区域代表密度大

137
00:06:27.240 --> 00:06:31.560
大多数点都聚集在高密度区域

138
00:06:31.560 --> 00:06:36.220
图中浅蓝色的部分就是低密度区域
【教育无边界字幕组】詹詹詹米 | 靖哥哥 | HikaruSama