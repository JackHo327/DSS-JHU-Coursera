WEBVTT

1
00:00:00.880 --> 00:00:03.300
grDevices 包有一些不同的函数

2
00:00:03.300 --> 00:00:05.540
这些函数能够帮你处理颜色

3
00:00:05.540 --> 00:00:06.930
这节课我准备讲讲 colorRamp 和 colorRampPalette 两个函数

4
00:00:06.930 --> 00:00:11.450
这节课我准备讲讲 colorRamp 和 colorRampPalette 两个函数

5
00:00:11.450 --> 00:00:14.715
总的来说 这两个函数会读取一系列调色板的颜色

6
00:00:14.715 --> 00:00:18.060
并将其相互混合

7
00:00:18.060 --> 00:00:20.640
你可以用下面这个模式理解

8
00:00:20.640 --> 00:00:25.990
如果一个画家的调色盘里有两到四滩特定颜色的颜料

9
00:00:25.990 --> 00:00:29.660
如果一个画家的调色盘里有两到四滩特定颜色的颜料

10
00:00:29.660 --> 00:00:31.760
他接下来可以用他的画笔

11
00:00:31.760 --> 00:00:34.740
在调色盘上将这几滩不同的颜色混合

12
00:00:34.740 --> 00:00:37.090
这样你就通过混合调色盘上的原色得出了新的颜色

13
00:00:37.090 --> 00:00:40.620
这样你就通过混合调色盘上的原色得出了新的颜色

14
00:00:41.840 --> 00:00:43.940
我从来没有画过油画

15
00:00:43.940 --> 00:00:45.650
这些东西只是我从电视电影上了解的

16
00:00:45.650 --> 00:00:51.090
不过我是这么想象的

17
00:00:51.090 --> 00:00:54.655
画家会用画笔把一些基本颜色混合在一起

18
00:00:54.655 --> 00:00:57.650
那么 colorRamp 和 colorRampPalette 函数也会这么做

19
00:00:57.650 --> 00:01:00.770
两个函数会选取一组颜色组成一个调色盘

20
00:01:00.770 --> 00:01:05.370
然后按数值混合这些原色组成新的颜色

21
00:01:05.370 --> 00:01:08.010
然后按数值混合这些原色组成新的颜色

22
00:01:09.570 --> 00:01:11.470
另一个你可能感兴趣的函数是 colors()

23
00:01:11.470 --> 00:01:16.090
你只需要运行这个函数就可以了 不需要任何参数

24
00:01:16.090 --> 00:01:19.170
这个函数会返回一个字符向量

25
00:01:19.170 --> 00:01:21.590
上面包含你可以在一个绘图函数中可用的所有颜色名称

26
00:01:21.590 --> 00:01:25.550
这些是你可以直接用名称引用的颜色

27
00:01:25.550 --> 00:01:29.700
而不需要使用我们后面讲到的红、绿、蓝色的值

28
00:01:32.260 --> 00:01:34.350
colorRamp 函数会读取一组特定的颜色

29
00:01:34.350 --> 00:01:38.090
然后返回另一个函数

30
00:01:39.260 --> 00:01:43.290
这个由 colorRamp() 返回的函数会取 0 到 1 之间的数值

31
00:01:43.290 --> 00:01:46.960
这个数值反映了调色盘两端颜色的混合比例

32
00:01:46.960 --> 00:01:51.090
R 里面有一个类似的函数 gray()

33
00:01:51.090 --> 00:01:55.350
gray 函数是把黑色和白色混合

34
00:01:55.350 --> 00:01:57.500
这个函数可以给出黑色和白色之间的所有灰色

35
00:01:57.500 --> 00:02:00.604
这个函数可以给出黑色和白色之间的所有灰色

36
00:02:00.604 --> 00:02:04.366
colorRamp 函数则是 gray 函数的一般化

37
00:02:04.366 --> 00:02:07.006
因为 colorRamp 函数可以接受调色盘上的任意颜色组合

38
00:02:07.006 --> 00:02:10.042
然后返回一个取 0 到 1 之间数值的函数

39
00:02:10.042 --> 00:02:14.183
这个函数会根据数值混合调色盘上两极的颜色

40
00:02:14.183 --> 00:02:18.473
colorRampPalette() 是一个与 colorRamp() 极为相似的函数

41
00:02:18.473 --> 00:02:22.698
这个函数会读取一个调色板里的颜色 然后返回另一个函数

42
00:02:22.698 --> 00:02:24.492
但是这个函数取得不是 0 到 1 之间的数值

43
00:02:24.492 --> 00:02:26.848
而是一个整数参数

44
00:02:26.848 --> 00:02:30.080
然后返回一个插入那个调色板的颜色向量

45
00:02:30.080 --> 00:02:36.255
这跟 heat.colors() 或者 topo.colors() 比较相似

46
00:02:36.255 --> 00:02:37.290
下面是一个非常简单的例子

47
00:02:37.290 --> 00:02:39.200
下面是一个非常简单的例子

48
00:02:39.200 --> 00:02:41.670
在开头 我创建了稍后会使用到的调色盘

49
00:02:41.670 --> 00:02:44.090
这个调色盘由红、蓝两种颜色组成

50
00:02:44.090 --> 00:02:45.160
你可以想象成在你画画用的调色盘上

51
00:02:45.160 --> 00:02:47.740
有一滩红色颜料和一滩蓝色颜料

52
00:02:47.740 --> 00:02:50.300
有一滩红色颜料和一滩蓝色颜料

53
00:02:50.300 --> 00:02:54.560
然后你把它们按不同比例混合出新的颜色

54
00:02:54.560 --> 00:03:00.160
当我把这个调色盘传递给 colorRamp() 后 它返回了一个函数

55
00:03:00.160 --> 00:03:05.540
我把这个函数叫 pal 现在 pal() 可以读取从 0 到 1 的数字

56
00:03:05.540 --> 00:03:07.780
如果我写 pal(0)

57
00:03:07.780 --> 00:03:08.510
我会得到什么？

58
00:03:08.510 --> 00:03:12.120
我会得到一个由一行三列组成的矩阵

59
00:03:12.120 --> 00:03:12.980
而这三列分别代表红色、蓝色和绿色

60
00:03:12.980 --> 00:03:16.750
而这三列分别代表红色、蓝色和绿色

61
00:03:17.830 --> 00:03:21.800
第一列中 返回的数值是255

62
00:03:21.800 --> 00:03:26.380
这是这些颜色可以达到的最大值

63
00:03:26.380 --> 00:03:29.440
你可以指明一个在 0 到 255 之间的数字

64
00:03:29.440 --> 00:03:33.250
也就是说 每种颜色都有256个数字可以被指定

65
00:03:33.250 --> 00:03:35.445
当运行 pal(0) 的时候

66
00:03:35.445 --> 00:03:38.070
变量为 0

67
00:03:38.070 --> 00:03:40.400
返回的是红色

68
00:03:40.400 --> 00:03:43.510
因为这是我指定的调色盘中的一种边界颜色

69
00:03:43.510 --> 00:03:45.310
当然 另一个边界是蓝色

70
00:03:45.310 --> 00:03:47.180
所以返回的颜色里面红色的值达到最大

71
00:03:47.180 --> 00:03:50.050
而绿色和蓝色的值都是 0

72
00:03:50.050 --> 00:03:51.998
所以这个颜色就是红色

73
00:03:51.998 --> 00:03:55.348
当我运行 pal(1) 的时候

74
00:03:55.348 --> 00:03:59.370
返回的红色和绿色的值为 0  而蓝色的值为最大的 255

75
00:03:59.370 --> 00:04:00.740
也就是说 这个颜色是蓝色

76
00:04:00.740 --> 00:04:03.860
它是调色盘的另一个边界

77
00:04:03.860 --> 00:04:06.990
那如果我给出的参数是中间的数字 例如 pal(0.5) 会怎样？

78
00:04:06.990 --> 00:04:09.105
得出的结果是这样

79
00:04:09.105 --> 00:04:11.192
返回的颜色应该是恰好介于红色和蓝色中间的颜色

80
00:04:11.192 --> 00:04:18.242
所以函数返回了红色和蓝色值为 127.5 而绿色值为 0 的颜色

81
00:04:18.242 --> 00:04:22.777
不管看起来是什么 反正就是一半红色和一半蓝色的混合

82
00:04:22.777 --> 00:04:25.182
你注意到在所有运行结果中都没有绿色

83
00:04:25.182 --> 00:04:28.822
这是因为当我们在红色和蓝色之间插值时

84
00:04:28.822 --> 00:04:31.200
没有把绿色放进去

85
00:04:36.720 --> 00:04:40.544
所以如果我给出一个 0 到 1 之间的数字序列的话

86
00:04:40.544 --> 00:04:44.070
pal 函数会返回一个介于红色和蓝色之间的颜色序列

87
00:04:44.070 --> 00:04:48.700
在这里我给出了一个从 0 到 1 的序列 长度为10

88
00:04:48.700 --> 00:04:53.980
这个序列从 0 开始 到 1 结束 中间还有 8 个数字

89
00:04:53.980 --> 00:04:57.070
当我把这个序列传递给 pal 函数时

90
00:04:57.070 --> 00:05:01.850
你可以看到 序列最上方从红色开始 也就是说 红色值最大 蓝色和绿色为 0

91
00:05:01.850 --> 00:05:01.980
然后

92
00:05:01.980 --> 00:05:04.960
红色值会慢慢减少 蓝色值则慢慢增加

93
00:05:04.960 --> 00:05:09.240
直到序列底部 为蓝色值最大 红色和绿色为 0

94
00:05:09.240 --> 00:05:11.510
这些就是你把调色盘里面的红色和蓝色混合得出的不同颜色

95
00:05:11.510 --> 00:05:13.940
这些就是你把调色盘里面的红色和蓝色混合得出的不同颜色

96
00:05:17.610 --> 00:05:19.492
这就是关于 colorRamp 函数的内容

97
00:05:19.492 --> 00:05:22.780
colorRampPalette() 与 colorRamp() 十分相似

98
00:05:22.780 --> 00:05:25.530
只有它返回的函数稍有不同

99
00:05:25.530 --> 00:05:28.180
在这里我传递了一个不同的调色盘到函数中

100
00:05:28.180 --> 00:05:31.010
这个调色盘有两种颜色 红色和黄色

101
00:05:31.010 --> 00:05:35.730
现在我们尝试混合这两种颜色

102
00:05:35.730 --> 00:05:39.202
这里我们有一个 colorRampPalette() 返回的函数 pal()

103
00:05:39.202 --> 00:05:43.150
pal() 会取整数参数

104
00:05:43.150 --> 00:05:44.890
而不是 0 到 1 之间的数字

105
00:05:44.890 --> 00:05:47.961
例如我代入 2

106
00:05:47.961 --> 00:05:52.380
那么 pal(2) 会返回两种从调色盘混合得到的颜色

107
00:05:52.380 --> 00:05:55.060
因为调色盘本身只有2种颜色

108
00:05:55.060 --> 00:05:56.880
如果我用 2 作为参数

109
00:05:56.880 --> 00:05:58.400
那么函数只会返回调色盘上的 2 种颜色

110
00:05:58.400 --> 00:06:01.160
即 (返回的) 第一种颜色是红色 而第二种是黄色

111
00:06:01.160 --> 00:06:03.130
而且函数返回的格式也有所不同

112
00:06:03.130 --> 00:06:07.000
它并不返回表示红、绿、蓝三种颜色的值的矩阵

113
00:06:07.000 --> 00:06:08.370
而是返回一个字符向量

114
00:06:09.460 --> 00:06:12.660
里面用十六进制数表示红色、绿色和蓝色的值

115
00:06:12.660 --> 00:06:15.820
里面用十六进制数表示红色、绿色和蓝色的值

116
00:06:15.820 --> 00:06:20.076
如果你忽略井号 # 的话

117
00:06:20.076 --> 00:06:23.460
你可以看到每个字符串有 6 位

118
00:06:23.460 --> 00:06:25.360
前两位代表红色 中间两位代表绿色 最后两位代表蓝色

119
00:06:25.360 --> 00:06:28.340
前两位代表红色 中间两位代表绿色 最后两位代表蓝色

120
00:06:29.470 --> 00:06:33.730
例如返回的第一个数字 FF0000

121
00:06:33.730 --> 00:06:34.700
在十六进制中 F 是最大的数字

122
00:06:34.700 --> 00:06:36.900
在十六进制中 F 是最大的数字

123
00:06:36.900 --> 00:06:40.960
所以红色值为 FF 代表红色占最大值

124
00:06:40.960 --> 00:06:45.130
而绿色和蓝色值为 00 

125
00:06:45.130 --> 00:06:46.360
那这个颜色代表的就是红色

126
00:06:46.360 --> 00:06:51.150
在第二个字符串中 红色值和绿色的值是 FF  蓝色的值是 00

127
00:06:51.150 --> 00:06:55.730
也就是说返回的红色值和绿色值达到最大 且没有蓝色

128
00:06:55.730 --> 00:06:56.770
那是什么颜色呢

129
00:06:56.770 --> 00:06:59.870
答案是黄色 因为红加绿等于黄

130
00:06:59.870 --> 00:07:03.100
也就是调色盘的另一端

131
00:07:03.100 --> 00:07:08.040
现在 如果我运行 pal(10) 的话

132
00:07:08.040 --> 00:07:11.700
你会看见第一个元素是红色 因为红色的值是 FF 而其它的值是 0

133
00:07:11.700 --> 00:07:14.170
最后一个元素是黄色

134
00:07:14.170 --> 00:07:18.070
因为红色和绿色的值是 FF 而蓝色的值是 0

135
00:07:18.070 --> 00:07:21.720
但是在中间 我得到了一些混合的颜色

136
00:07:21.720 --> 00:07:24.920
当你继续往下看时

137
00:07:24.920 --> 00:07:27.860
会发现这里有一些红色 还有一点绿色的混合

138
00:07:27.860 --> 00:07:29.860
但是所有颜色中都没有蓝色

139
00:07:29.860 --> 00:07:33.110
因为你在混合红色和黄色时没有牵涉到蓝色

140
00:07:33.110 --> 00:07:35.690
你可以看见这些颜色从红色变到黄色的过程中

141
00:07:35.690 --> 00:07:38.654
颜色的十六进制表示法

142
00:07:38.654 --> 00:07:38.724
【教育无边界字幕组】詹詹詹米 |小蟹走天下 | HikaruSama