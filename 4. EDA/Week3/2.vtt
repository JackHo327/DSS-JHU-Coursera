WEBVTT

1
00:00:00.820 --> 00:00:04.180
为了说明层次聚类是怎么工作的

2
00:00:04.180 --> 00:00:05.960
这里我模拟了一个非常简单的的数据集

3
00:00:05.960 --> 00:00:09.700
每次我都会设置随机数生成的种子来生成同样的数据

4
00:00:09.700 --> 00:00:11.345
你可以自己运行这个程序

5
00:00:11.345 --> 00:00:12.950
模拟出数据并看一看这些数据

6
00:00:12.950 --> 00:00:18.050
我一共画了12个点 

7
00:00:18.050 --> 00:00:20.675
我们可以从图上清楚地看到有三个簇

8
00:00:20.675 --> 00:00:24.419
我用 text() 给每个点加了标签

9
00:00:24.419 --> 00:00:25.783
因此你可以看到

10
00:00:25.783 --> 00:00:26.973
哪个点代表了什么

11
00:00:26.973 --> 00:00:29.409
现在我要运行层次聚类算法

12
00:00:29.409 --> 00:00:32.320
看看这些点怎样合并到一起

13
00:00:34.220 --> 00:00:37.560
要使用层次聚类算法

14
00:00:37.560 --> 00:00:39.240
首先要做的一件事情

15
00:00:39.240 --> 00:00:40.980
是计算所有点之间的距离

16
00:00:40.980 --> 00:00:44.670
你需要计算所有点两两之间的距离

17
00:00:44.670 --> 00:00:46.240
这样你能够知道

18
00:00:46.240 --> 00:00:48.180
哪两个点最近

19
00:00:48.180 --> 00:00:51.270
在 R 中做这件事最简单的方法是用 dist()

20
00:00:51.270 --> 00:00:51.780
在 R 中做这件事最简单的方法是用 dist()

21
00:00:51.780 --> 00:00:54.850
dist() 的输入参数是一个矩阵或者数据框

22
00:00:54.850 --> 00:00:57.110
这里数据框有两列

23
00:00:57.110 --> 00:00:59.439
第一列是 x 坐标 第二列是 y 坐标

24
00:01:00.490 --> 00:01:04.350
所以它本质上是一个点的矩阵或者数据框

25
00:01:04.350 --> 00:01:08.140
dist() 的作用就是计算数据框中

26
00:01:08.140 --> 00:01:10.880
所有不同行所表示的点之间的距离

27
00:01:10.880 --> 00:01:13.600
它给出的结果就是所谓的距离矩阵 (distance matrix)

28
00:01:13.600 --> 00:01:15.460
给你所有点两两之间的距离

29
00:01:15.460 --> 00:01:16.310
如果你调用 dist() 时

30
00:01:16.310 --> 00:01:17.690
没有指定其它参数

31
00:01:17.690 --> 00:01:20.690
它会默认使用欧氏距离度量 (Euclidean distance metric)

32
00:01:20.690 --> 00:01:25.520
但是如果有需要你也可以选择使用其它的距离度量

33
00:01:25.520 --> 00:01:26.190
在这里

34
00:01:26.190 --> 00:01:28.860
下面这边 你可以看到

35
00:01:28.860 --> 00:01:31.260
dist() 返回的距离矩阵的大部分内容

36
00:01:31.260 --> 00:01:34.480
你可以看到这是一个下三角矩阵 (lower triangular matrix)

37
00:01:35.480 --> 00:01:37.270
它给出了所有点两两之间的距离

38
00:01:37.270 --> 00:01:40.590
比如点1和点2之间的距离是0.34

39
00:01:40.590 --> 00:01:41.840
当然

40
00:01:41.840 --> 00:01:43.960
这里距离的实际数值没有什么意义

41
00:01:43.960 --> 00:01:47.080
因为我只是模拟了数据 所以数字没有特别的含义

42
00:01:47.080 --> 00:01:48.920
但是你可以看到

43
00:01:48.920 --> 00:01:52.020
有些点之间的距离比其它点之间大很多

44
00:01:52.020 --> 00:01:56.135
比如点3和点1之间距离是0.574

45
00:01:56.135 --> 00:01:59.750
而点3和点2之间的距离是0.24

46
00:01:59.750 --> 00:02:04.150
所以点3距离点2比距离点1近

47
00:02:04.150 --> 00:02:06.878
你可以像这样一行行往下看

48
00:02:06.878 --> 00:02:10.065
观察每个点距离其它点有多远

49
00:02:10.065 --> 00:02:15.150
  观察每个点距离其它点有多远

50
00:02:15.150 --> 00:02:18.768
这里层次聚类算法的基本思想就是

51
00:02:18.768 --> 00:02:20.658
我们首先要找到距离最近的两点

52
00:02:20.658 --> 00:02:22.593
我们首先要找到距离最近的两点

53
00:02:22.593 --> 00:02:24.569
恰好是点5和点6

54
00:02:24.569 --> 00:02:26.285
这里我把它们设成了橘黄色

55
00:02:26.285 --> 00:02:28.417
因为点5和点6之间距离最近

56
00:02:28.417 --> 00:02:31.770
我们要把它们归为一组

57
00:02:31.770 --> 00:02:34.650
将它们合并成一个簇

58
00:02:34.650 --> 00:02:38.220
然后画一个单独的点

59
00:02:38.220 --> 00:02:40.250
中间的小加号

60
00:02:40.250 --> 00:02:43.890
就是这个合并后的点集的新位置

61
00:02:44.990 --> 00:02:48.870
所以现在相当于我将点5和点6

62
00:02:48.870 --> 00:02:51.270
这两个点合并成了一个点

63
00:02:52.830 --> 00:02:55.070
接下来距离最近的两点

64
00:02:55.070 --> 00:02:58.230
是右下角红色的点10和点11

65
00:02:58.230 --> 00:03:00.530
所以我要把它们合并起来

66
00:03:00.530 --> 00:03:02.640
产生一个新的“超级点”

67
00:03:03.652 --> 00:03:05.330
因此这个算法类似一个筛选的过程

68
00:03:05.330 --> 00:03:08.160
因此这个算法类似一个筛选的过程

69
00:03:08.160 --> 00:03:09.830
我们可以像这样继续往下做

70
00:03:10.880 --> 00:03:13.570
最终会得到这张图

71
00:03:13.570 --> 00:03:16.990
叫做树状图 它向我们展示了这些点是怎样聚成簇的

72
00:03:16.990 --> 00:03:20.530
你可以在最右边看到点5和点6合并到了一起

73
00:03:20.530 --> 00:03:25.920
然后在中间你可以看到点10和点11

74
00:03:25.920 --> 00:03:28.920
越往树的下层

75
00:03:28.920 --> 00:03:30.430
越往树的下层

76
00:03:30.430 --> 00:03:33.240
在树的最下面的点最先被聚到一起

77
00:03:33.240 --> 00:03:36.810
越往上的点越晚被聚到一起

78
00:03:36.810 --> 00:03:42.976
你可以看到

79
00:03:42.976 --> 00:03:44.870
比如点5和点6 它们被合并到一起

80
00:03:44.870 --> 00:03:46.680
然后它们再和点7合并到一簇

81
00:03:46.680 --> 00:03:48.270
点5、点6和点7

82
00:03:48.270 --> 00:03:51.100
合并到一起变成一个“超级点”

83
00:03:51.100 --> 00:03:53.770
然后再和点8合并 这样下去

84
00:03:53.770 --> 00:03:55.640
聚类算法产生的树状图

85
00:03:55.640 --> 00:03:59.720
其特点之一是

86
00:03:59.720 --> 00:04:02.270
它没有告诉你一共有多少个簇 对吧？

87
00:04:02.270 --> 00:04:05.090
你会注意到图上没有特别的标签

88
00:04:05.090 --> 00:04:08.510
告诉你有两个簇还是三个簇什么的

89
00:04:08.510 --> 00:04:10.450
所以你必须在树上某个地方砍一刀

90
00:04:10.450 --> 00:04:15.100
来确定有多少簇

91
00:04:15.100 --> 00:04:16.560
比如 如果我在 y 轴2.0处截断

92
00:04:16.560 --> 00:04:21.110
比如 如果我在 y 轴2.0处截断

93
00:04:21.110 --> 00:04:23.010
也就是在 y 值2.0的地方画一条横线

94
00:04:24.150 --> 00:04:25.470
也就是在 y 值2.0的地方画一条横线

95
00:04:25.470 --> 00:04:27.270
那我们的问题就是这下面会有多少个分支？

96
00:04:27.270 --> 00:04:29.190
那我们的问题就是这下面会有多少个分支？

97
00:04:29.190 --> 00:04:33.240
如果我在2.0的地方画一条横线 我会碰到两个分支

98
00:04:33.240 --> 00:04:35.990
这表明大致有两个簇

99
00:04:35.990 --> 00:04:38.820
但是如果要在 1.0 的高度画一条横线

100
00:04:38.820 --> 00:04:43.800
但是如果要在 1.0 的高度画一条横线

101
00:04:43.800 --> 00:04:46.190
那么画完以后

102
00:04:46.190 --> 00:04:47.710
你会发现你碰到了三个分支

103
00:04:47.710 --> 00:04:49.950
这说明有三个簇

104
00:04:49.950 --> 00:04:53.320
所以根据你想要画的这条横线的位置

105
00:04:53.320 --> 00:04:59.690
或者说砍树的位置 在聚类时你会得到不同数量的簇

106
00:04:59.690 --> 00:05:03.370
当然 在极端的情况下

107
00:05:03.370 --> 00:05:05.230
如果你一直向下砍到底部

108
00:05:05.230 --> 00:05:08.400
你会得到12个簇 这和数据点的个数相同

109
00:05:08.400 --> 00:05:11.310
所以你必须砍在对你来说合适的位置

110
00:05:11.310 --> 00:05:12.410
所以你必须砍在对你来说合适的位置

111
00:05:12.410 --> 00:05:15.540
目前我们没有一个规则来确定要从哪儿截断

112
00:05:15.540 --> 00:05:18.650
但是一旦你在某个位置砍断了它

113
00:05:20.130 --> 00:05:21.330
就可以从层次聚类中得到各个簇的情况
【教育无边界字幕组】靖哥哥 | HikaruSama | hazard1990