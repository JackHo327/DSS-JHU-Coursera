WEBVTT

1
00:00:00.940 --> 00:00:03.770
层次聚类 (hierarchical clustering) 是一种

2
00:00:03.770 --> 00:00:07.720
对高维或者多维数据进行可视化的常见方法

3
00:00:07.720 --> 00:00:09.520
比较容易上手

4
00:00:09.520 --> 00:00:11.590
这一概念对大多数人而言非常直观

5
00:00:11.590 --> 00:00:13.450
它能让你很快地

6
00:00:13.450 --> 00:00:17.720
理解一些维数非常高的数据集表达了什么

7
00:00:17.720 --> 00:00:20.910
像大多数聚类算法一样

8
00:00:22.060 --> 00:00:26.350
比如 K 均值算法

9
00:00:26.350 --> 00:00:29.390
在定义这种方法时你需要解决的基本问题是

10
00:00:29.390 --> 00:00:32.990
如何定义两者的远近程度

11
00:00:32.990 --> 00:00:35.320
因为某种意义上所有的聚类方法都在试图告诉你

12
00:00:35.320 --> 00:00:40.050
一个东西相对于其它东西距离另一样东西更近

13
00:00:40.050 --> 00:00:42.290
比如说 同一簇中的元素

14
00:00:42.290 --> 00:00:46.450
互相之间会比和另一个簇中的元素更近

15
00:00:46.450 --> 00:00:47.930
所以我们必须定义何谓近

16
00:00:47.930 --> 00:00:50.580
何谓把东西分组

17
00:00:50.580 --> 00:00:52.640
何谓把东西分组

18
00:00:52.640 --> 00:00:54.630
当我们有了距离的概念

19
00:00:54.630 --> 00:00:56.260
并且有了把东西分组的方法时

20
00:00:56.260 --> 00:00:59.200
我们又如何把这个过程可视化

21
00:00:59.200 --> 00:01:01.520
把我们做的这些运算可视化？

22
00:01:01.520 --> 00:01:05.890
以及我们如何解释这种分组？

23
00:01:05.890 --> 00:01:09.950
聚类分析是一种非常重要并且被广泛运用的方法

24
00:01:09.950 --> 00:01:11.900
如果在谷歌上搜索聚类分析

25
00:01:11.900 --> 00:01:14.500
你会看到几百万条结果

26
00:01:14.500 --> 00:01:17.900
它被广泛应用于

27
00:01:17.900 --> 00:01:21.270
很多不同的科学领域和其它一些地方

28
00:01:21.270 --> 00:01:23.370
所以学习这些方法的原理是非常有益的

29
00:01:25.210 --> 00:01:28.410
层次聚类法 顾名思义

30
00:01:28.410 --> 00:01:32.660
就是关于把数据分入某种层次中

31
00:01:32.660 --> 00:01:33.820
常用的方法是

32
00:01:33.820 --> 00:01:37.130
聚合法 (agglomerative approach)

33
00:01:37.130 --> 00:01:39.270
它是一种自下而上的方法

34
00:01:39.270 --> 00:01:43.220
也就是你把数据当做一些独立的点 然后开始

35
00:01:43.220 --> 00:01:45.950
把它们分入一些小类 小类再分入大类

36
00:01:45.950 --> 00:01:48.200
直到整个数据集成为一个大类

37
00:01:48.200 --> 00:01:50.715
你可以想象它们是一些漂浮着的小颗粒

38
00:01:50.715 --> 00:01:53.950
然后你把它们揉成小球

39
00:01:53.950 --> 00:01:56.340
再把小球揉成更大的球

40
00:01:56.340 --> 00:01:59.658
最后这些大球合并到一起组成一个超级大簇

41
00:01:59.658 --> 00:02:01.758
这就是层次聚类法里的聚合法

42
00:02:01.758 --> 00:02:05.210
我们现在就来讨论这种方法

43
00:02:05.210 --> 00:02:08.250
那它的基本思想是 你先得找出

44
00:02:08.250 --> 00:02:11.870
数据集中最近的两点

45
00:02:11.870 --> 00:02:13.810
把它们合并到一起

46
00:02:13.810 --> 00:02:17.970
变成一个超级点 这个合并而成的点

47
00:02:17.970 --> 00:02:19.770
并不是数据集中真实存在的点

48
00:02:19.770 --> 00:02:21.800
但你能把它看作一个新的点

49
00:02:21.800 --> 00:02:24.540
然后把原来那两个点删掉

50
00:02:24.540 --> 00:02:27.960
用这个超级点来代替它们

51
00:02:27.960 --> 00:02:29.580
不断重复这个过程

52
00:02:29.580 --> 00:02:33.110
找出下两个最近的点 把它们合并到一起

53
00:02:35.160 --> 00:02:36.690
这样一来

54
00:02:36.690 --> 00:02:38.360
在这个合并的过程中

55
00:02:38.360 --> 00:02:41.900
你就会得到一棵数据树

56
00:02:41.900 --> 00:02:44.540
它展示了你合并数据点的顺序

57
00:02:44.540 --> 00:02:47.040
这种方法中有两点非常重要

58
00:02:47.040 --> 00:02:49.360
一是距离的度量

59
00:02:49.360 --> 00:02:51.989
也就是如何计算两点之间的距离

60
00:02:53.170 --> 00:02:56.780
其二便是合并数据点的方法

61
00:02:56.780 --> 00:03:01.090
当你找出最近的某两点时

62
00:03:01.090 --> 00:03:02.780
要怎样把它们合并到一起？

63
00:03:02.780 --> 00:03:07.530
层次聚类法的好处之一就是会产生一棵树

64
00:03:07.530 --> 00:03:10.690
有时我们称它为树状图 (dendrogram)

65
00:03:10.690 --> 00:03:12.950
树状图展示了数据点是如何合并的

66
00:03:12.950 --> 00:03:15.470
可以说 层次聚类算法中

67
00:03:15.470 --> 00:03:17.990
最首要要解决的问题就是

68
00:03:17.990 --> 00:03:20.390
最首要要解决的问题就是

69
00:03:20.390 --> 00:03:22.740
定义“近”的概念

70
00:03:22.740 --> 00:03:24.250
因为如果你定义的距离

71
00:03:24.250 --> 00:03:26.180
对于你要处理的问题毫无意义

72
00:03:26.180 --> 00:03:27.510
就会导致输入和输出都毫无用处 对吧？

73
00:03:27.510 --> 00:03:29.770
如果你用一个毫无意义的距离度量

74
00:03:29.770 --> 00:03:33.450
那么你得到的结果相对来说也会是毫无意义的

75
00:03:33.450 --> 00:03:37.600
这里有一些距离度量的例子

76
00:03:37.600 --> 00:03:42.570
可能我们最熟悉的距离度量就是欧氏距离

77
00:03:42.570 --> 00:03:45.170
也就是两点之间的直线距离

78
00:03:46.930 --> 00:03:51.230
一种相似距离度量是两点之间的相关性

79
00:03:51.230 --> 00:03:53.170
或者说是相似程度

80
00:03:53.170 --> 00:03:56.570
还有一种二进制距离 也叫曼哈顿距离 (Manhattan distance)

81
00:03:56.570 --> 00:04:01.030
一会儿我会对其进行解释

82
00:04:01.030 --> 00:04:03.510
所以你需要选择一种距离度量

83
00:04:03.510 --> 00:04:07.830
要对你的问题具有意义 这样你才能得到有意义的结果

84
00:04:08.870 --> 00:04:11.610
我们先说欧氏距离 这里有个简单的示意图

85
00:04:11.610 --> 00:04:16.368
如果你选取两个城市 比如说巴尔的摩和华盛顿

86
00:04:16.368 --> 00:04:19.430
把他们放在一张地图上

87
00:04:19.430 --> 00:04:21.320
可以想见

88
00:04:21.320 --> 00:04:23.230
每个城市的中心都有 x 坐标和 y 坐标

89
00:04:24.682 --> 00:04:29.160
你想衡量这两个城市中心的距离

90
00:04:29.160 --> 00:04:32.800
可以在两个城市之间画条对角线

91
00:04:32.800 --> 00:04:36.170
然后按照通常的方法来计算距离

92
00:04:36.170 --> 00:04:38.310
这个距离是

93
00:04:38.310 --> 00:04:41.590
x 坐标值之差和 y 坐标值之差的函数

94
00:04:41.590 --> 00:04:44.810
要计算欧氏距离只需要对

95
00:04:44.810 --> 00:04:46.220
x 坐标值之差取平方

96
00:04:46.220 --> 00:04:48.190
对 y 坐标值之差取平方

97
00:04:48.190 --> 00:04:50.090
然后将这两个平方值相加再开根

98
00:04:50.090 --> 00:04:53.210
这就是经典的欧氏距离的定义

99
00:04:53.210 --> 00:04:55.270
你可以想象到在实际生活中

100
00:04:55.270 --> 00:04:59.740
如果有一只鸟从华盛顿飞往巴尔的摩

101
00:04:59.740 --> 00:05:02.230
它只需要沿着直线从一个城市飞到另一个 因为它们可以在空中飞翔

102
00:05:02.230 --> 00:05:06.440
而不会被道路或山脉这样的东西阻隔

103
00:05:06.440 --> 00:05:07.530
因此

104
00:05:07.530 --> 00:05:09.790
这就是两个城市间的直线距离

105
00:05:09.790 --> 00:05:12.020
这对你是否有意义则取决于

106
00:05:12.020 --> 00:05:14.460
你是只鸟还是其它什么

107
00:05:14.460 --> 00:05:18.840
你需要在解决问题时对这一点也加以考量

108
00:05:18.840 --> 00:05:22.690
欧氏距离很容易就能一般化到更高维的空间

109
00:05:22.690 --> 00:05:24.350
这个例子中只有两个维度

110
00:05:24.350 --> 00:05:26.450
但即便你有一百个维度

111
00:05:26.450 --> 00:05:29.270
你仍然可以简单地计算出每个维度的坐标之差

112
00:05:29.270 --> 00:05:31.680
取平方 加起来 然后再开根

113
00:05:31.680 --> 00:05:32.600
所以这是一种很好的度量

114
00:05:32.600 --> 00:05:35.623
很自然就能拓展到高维空间的问题

115
00:05:35.623 --> 00:05:43.036
  曼哈顿距离则是因为

116
00:05:43.036 --> 00:05:48.052
曼哈顿距离则是因为

117
00:05:48.052 --> 00:05:51.730
它看起来像城市街道网络上的点而得名

118
00:05:51.730 --> 00:05:55.120
想象一下你在纽约曼哈顿

119
00:05:55.120 --> 00:05:56.820
想从一个点走到另一个点

120
00:05:56.820 --> 00:06:00.120
你可以看下这张示意图上的两个黑色的圈

121
00:06:00.120 --> 00:06:02.290
你想从一点走到另一点

122
00:06:02.290 --> 00:06:03.870
那如果是在一个城市里

123
00:06:03.870 --> 00:06:06.180
你不能直接从一个点走到另一个点

124
00:06:06.180 --> 00:06:08.320
因为有这些建筑物阻隔

125
00:06:08.320 --> 00:06:09.970
或者说你必须沿着街道走

126
00:06:11.040 --> 00:06:13.320
在街道上 因为它们处于一个网格中

127
00:06:13.320 --> 00:06:16.196
你只可以向上下左右四个方向走

128
00:06:16.196 --> 00:06:17.560
这个例子中绿色的线

129
00:06:17.560 --> 00:06:19.716
代表了欧氏距离

130
00:06:19.716 --> 00:06:21.080
如果你是一只鸟

131
00:06:21.080 --> 00:06:24.095
可以飞越过在这两点之间的一切

132
00:06:24.095 --> 00:06:27.310
但是如果是个在地上走的人 你就必须沿着红线走

133
00:06:27.310 --> 00:06:29.590
或沿着蓝线或者黄线走

134
00:06:29.590 --> 00:06:31.970
又或沿着其他类似的路线走

135
00:06:31.970 --> 00:06:33.580
关键是你必须沿着街区走

136
00:06:33.580 --> 00:06:34.620
关键是你必须沿着街区走

137
00:06:34.620 --> 00:06:38.470
你沿着街区走

138
00:06:38.470 --> 00:06:40.510
可以把这些灰色的线想象成街道

139
00:06:40.510 --> 00:06:43.640
你走过的距离就是曼哈顿距离

140
00:06:43.640 --> 00:06:45.980
用公式写出来就是

141
00:06:45.980 --> 00:06:48.772
不同坐标之差的绝对值的和

142
00:06:48.772 --> 00:06:51.166
如果你有两条坐标

143
00:06:51.166 --> 00:06:53.902
就把在 x 轴方向走过的距离

144
00:06:53.902 --> 00:06:56.524
再加上你在 y 轴方向走过的距离的绝对值

145
00:06:56.524 --> 00:06:59.160
再加上你在 y 轴方向走过的距离的绝对值

146
00:06:59.160 --> 00:07:03.207
曼哈顿距离在某些情况下非常有用

147
00:07:03.207 --> 00:07:05.373
因为在这些情况下 

148
00:07:05.373 --> 00:07:09.236
它能更准确地表示两点之间的距离

149
00:07:09.236 --> 00:07:12.729
尤其是像在曼哈顿这样的城市里 两点的距离可能非常远

150
00:07:13.920 --> 00:07:15.900
即使它们在欧氏距离下

151
00:07:15.900 --> 00:07:19.320
看起来十分相近
【教育无边界字幕组】RachYu | LennyBear | hazard1990