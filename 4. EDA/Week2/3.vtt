WEBVTT

1
00:00:00.432 --> 00:00:05.278
大家好 这节课是关于 ggplot2 或者说 ggplot2 包的

2
00:00:05.278 --> 00:00:07.729
我将要谈谈如何使用 ggplot2 包来制作基本的绘图

3
00:00:07.729 --> 00:00:11.920
以及其相关内容

4
00:00:11.920 --> 00:00:15.168
我会在下一节课中更多谈到它设计的细节

5
00:00:15.168 --> 00:00:16.848
我会在下一节课中更多谈到它设计的细节

6
00:00:16.848 --> 00:00:20.740
以及你可以如何 ggplot2 的绘图函数上进行扩展

7
00:00:20.740 --> 00:00:24.760
第一个基本的问题 什么是 ggplot2 ？

8
00:00:24.760 --> 00:00:25.850
从根本来说 它是 R 中的一个包 

9
00:00:25.850 --> 00:00:28.250
你可以从 CRAN 上下载

10
00:00:28.250 --> 00:00:30.606
它使用“绘图语法” (grammar of graphics)

11
00:00:30.606 --> 00:00:33.396
这个名词是里兰·威尔金森 (Leland Wilkinson) 提出的 

12
00:00:33.396 --> 00:00:39.030
他在《图形的语法 (The Grammar of Graphics)》一书中对它进行了描述

13
00:00:39.030 --> 00:00:41.100
“绘图语法”是一种对如何把图形分解为抽象概念的描述

14
00:00:41.100 --> 00:00:44.090
“绘图语法”是一种对如何把图形分解为抽象概念的描述

15
00:00:44.090 --> 00:00:47.160
你可以想想某种语言的语法 比如英语语法

16
00:00:47.160 --> 00:00:50.360
其中包括动词、名词和副词

17
00:00:50.360 --> 00:00:50.910
那么问题是

18
00:00:50.910 --> 00:00:52.300
那么问题是

19
00:00:52.300 --> 00:00:56.070
什么是一个数据图形的动词、名词和副词呢？

20
00:00:56.070 --> 00:01:00.350
绘图语法就描述了这一类基本元素

21
00:01:00.350 --> 00:01:03.560
因而你可以把它们组合出新的图形类型

22
00:01:03.560 --> 00:01:05.790
就好像你可以用一个动词、一个名词和一个副词

23
00:01:05.790 --> 00:01:09.170
造出一个新句子 而这个句子或许从没人听过

24
00:01:09.170 --> 00:01:12.810
你可以运用绘图语法把制图的各种元素组合起来

25
00:01:12.810 --> 00:01:16.330
生成一副没有人见过的图

26
00:01:16.330 --> 00:01:17.315
这就是基本的思想

27
00:01:17.315 --> 00:01:23.890
它是一个非常强大的概念 可以用来组织各种数据图形

28
00:01:23.890 --> 00:01:28.756
在不久前 在 R 中还一直没有具体实现这一概念

29
00:01:28.756 --> 00:01:31.020
但来自爱荷华州立大学的哈德利·韦翰 (Hadley Wickham) 在其研究生阶段

30
00:01:31.020 --> 00:01:35.180
将绘图语法变成一个叫 ggplot 的包

31
00:01:35.180 --> 00:01:38.690
目前这个包的最新版本叫 ggplot2

32
00:01:40.020 --> 00:01:41.590
大家几乎可以把它当成 R 中的第三个绘图系统

33
00:01:41.590 --> 00:01:44.430
大家几乎可以把它当成 R 中的第三个绘图系统

34
00:01:44.430 --> 00:01:46.170
虽然它是建立在 R 原有的网格绘图系统的基础上

35
00:01:46.170 --> 00:01:49.080
虽然它是建立在 R 原有的网格绘图系统的基础上

36
00:01:49.080 --> 00:01:54.270
作为第三种绘制模式 ggplot 变得很受欢迎

37
00:01:54.270 --> 00:01:55.690
如果你把第一种模式想成是基础绘图

38
00:01:55.690 --> 00:01:58.145
使用诸如 plot() hist() boxplot() 这些函数

39
00:01:58.145 --> 00:02:01.080
然后第二种模式是 lattice 绘图

40
00:02:01.080 --> 00:02:04.960
使用 xyplot() 以及类似的栅栏型函数

41
00:02:04.960 --> 00:02:06.640
然后第三种模式就是 ggplot

42
00:02:06.640 --> 00:02:10.467
你可以从 CRAN 上获取程序包 可以使用 install.packages() (安装) 

43
00:02:10.467 --> 00:02:14.140
几乎所有的系统都可以安装 我觉得应该所有系统都可以

44
00:02:14.140 --> 00:02:17.054
你可以访问 ggplot 的网站 ggplot2.org

45
00:02:18.100 --> 00:02:22.490
ggplot 的优点就是

46
00:02:22.490 --> 00:02:24.180
它是以绘图语法为基础的

47
00:02:24.180 --> 00:02:27.370
也就是说 它包含一套有关绘图的理论

48
00:02:27.370 --> 00:02:28.730
而你可以依据这个理论

49
00:02:28.730 --> 00:02:32.090
重新组合不同的部分来绘制新的图表

50
00:02:32.090 --> 00:02:35.150
正如 Hadley Whitcomb 在他书中所提到的

51
00:02:35.150 --> 00:02:37.860
其中的基本思想就是要“缩短从思维到纸张的距离”

52
00:02:37.860 --> 00:02:41.090
如果你有一些要研究的数据

53
00:02:41.090 --> 00:02:44.680
你想出一个方法来可视化这组数据

54
00:02:44.680 --> 00:02:46.750
你想快速地把这些想法变成屏幕上的图像

55
00:02:46.750 --> 00:02:49.560
你想快速地把这些想法变成屏幕上的图像

56
00:02:51.290 --> 00:02:55.360
《ggplot2》这本书中的这句话

57
00:02:55.360 --> 00:02:57.430
某程度上总结了这个基本思想

58
00:02:57.430 --> 00:03:00.120
(绘图) 语法告诉我们 统计图形就是一种

59
00:03:00.120 --> 00:03:04.030
(绘图) 语法告诉我们 统计图形就是一种

60
00:03:04.030 --> 00:03:05.495
从数据到几何形状 (点、线、柱) 的美学属性 (颜色、形状、大小) 的映射

61
00:03:05.495 --> 00:03:11.050
从数据到几何形状 (点、线、柱) 的美学属性 (颜色、形状、大小) 的映射

62
00:03:11.050 --> 00:03:13.350
绘图也许还包含了数据的统计转换

63
00:03:13.350 --> 00:03:15.750
并绘制在特别的坐标系上

64
00:03:15.750 --> 00:03:17.010
也就是说 它包含了从数据到美学的映射

65
00:03:17.010 --> 00:03:21.720
几何对象和统计学

66
00:03:21.720 --> 00:03:22.860
以及一个坐标系

67
00:03:24.170 --> 00:03:26.160
在这节课上 我只想讲一讲 qplot 函数

68
00:03:26.160 --> 00:03:28.700
它是最基本的函数

69
00:03:28.700 --> 00:03:31.320
对于一个从基础绘图系统过渡来的人

70
00:03:31.320 --> 00:03:34.380
它大概是一个最佳的出发点

71
00:03:34.380 --> 00:03:36.780
我们知道在基础绘图系统里

72
00:03:36.780 --> 00:03:40.070
广泛应用的函数是 plot 函数

73
00:03:40.070 --> 00:03:44.770
因此 代表快速绘图 (quick plot) 的 qplot() 就是 ggplot 中广泛应用的函数

74
00:03:44.770 --> 00:03:48.510
它可以类比成基础系统中的 plot()

75
00:03:48.510 --> 00:03:49.830
因此

76
00:03:49.830 --> 00:03:52.880
在使用 ggplot 时 你需要习惯的一个关键不同点就是

77
00:03:52.880 --> 00:03:56.660
当你绘一个图的时候

78
00:03:56.660 --> 00:03:59.290
你把数据导入 qplot() 中

79
00:03:59.290 --> 00:04:03.190
你想要告诉它数据的来源 而数据总是会来源于数据框

80
00:04:03.190 --> 00:04:05.120
所以说 你的数据需要被整理成一个数据框

81
00:04:05.120 --> 00:04:07.990
所以说 你的数据需要被整理成一个数据框

82
00:04:07.990 --> 00:04:10.710
然后当你绘制变量的时候

83
00:04:10.710 --> 00:04:12.710
那些变量都将来源于数据框

84
00:04:12.710 --> 00:04:14.640
现在 你不需要指定一个数据框

85
00:04:14.640 --> 00:04:15.230
你可以...

86
00:04:15.230 --> 00:04:18.700
如果你不指定一个数据框

87
00:04:18.700 --> 00:04:22.320
qplot 函数及其它所有绘图函数都会在你的工作区寻找数据

88
00:04:22.320 --> 00:04:24.610
基本上来说指定数据框是一个好主意

89
00:04:24.610 --> 00:04:26.810
这样 当你读生成图形的代码时

90
00:04:26.810 --> 00:04:29.320
就可以准确了解数据的来源

91
00:04:30.840 --> 00:04:32.180
因此在开始绘图前

92
00:04:32.180 --> 00:04:34.430
整理数据框很重要

93
00:04:34.430 --> 00:04:37.080
一旦你开始绘图 这些图就由美学和几何组成了

94
00:04:37.080 --> 00:04:40.490
美学就是指事物的大小、形状

95
00:04:40.490 --> 00:04:42.140
以及颜色等这类东西

96
00:04:42.140 --> 00:04:43.870
而几何基本上就是你所绘制的对象

97
00:04:43.870 --> 00:04:45.710
而几何基本上就是你所绘制的对象

98
00:04:45.710 --> 00:04:47.550
即你正在绘制的点、线、柱等东西

99
00:04:47.550 --> 00:04:49.540
即你正在绘制的点、线、柱等东西

100
00:04:51.990 --> 00:04:56.120
对 qplot() 很重要

101
00:04:56.120 --> 00:04:58.250
且在使用 lattice() 时也同样重要的一方面就是

102
00:04:58.250 --> 00:05:00.390
使用因子变量的思想

103
00:05:00.390 --> 00:05:04.160
因子很重要 因为它们可以指出你的数据的子集

104
00:05:04.160 --> 00:05:07.370
假设你有一个数据框 其中包含了一个 y 变量和一个 x 变量

105
00:05:07.370 --> 00:05:11.080
还有一个因子变量

106
00:05:11.080 --> 00:05:13.250
这个因子将会指出数据框中指定数据的子集

107
00:05:13.250 --> 00:05:16.340
比如你可能有表示性别的因子

108
00:05:16.340 --> 00:05:17.050
你有一群男性

109
00:05:17.050 --> 00:05:18.180
和一群女性

110
00:05:18.180 --> 00:05:20.400
而这些就是你数据的子集

111
00:05:20.400 --> 00:05:23.660
你可能会想描绘出各个子集的某一种关系

112
00:05:23.660 --> 00:05:25.840
或者你可能想要根据性别给某些点上色

113
00:05:27.010 --> 00:05:30.400
或者你可能想要根据性别给某些点上色

114
00:05:30.400 --> 00:05:33.020
因此 由各种因子变量表示的分类

115
00:05:33.020 --> 00:05:37.610
对于注解一幅图是有帮助的

116
00:05:37.610 --> 00:05:39.640
因此 对这个特点很重要的一件事是

117
00:05:39.640 --> 00:05:42.050
因此 对这个特点很重要的一件事是

118
00:05:42.050 --> 00:05:44.680
当数据集中有因子变量的时候

119
00:05:44.680 --> 00:05:46.440
你们要确定它们都正确标注

120
00:05:46.440 --> 00:05:50.320
通常将一个因子变量标注为1、2、3并没什么用

121
00:05:50.320 --> 00:05:53.810
即使你确实有三个分类

122
00:05:53.810 --> 00:05:56.890
1、2、3也并不能提供任何特别的信息

123
00:05:56.890 --> 00:06:00.025
通常你会想要用更加有信息量的标签来标注它们

124
00:06:00.025 --> 00:06:03.120
这样你就能知道那些因子变量想要编码什么了

125
00:06:04.210 --> 00:06:07.290
qplot() 是一个使用起来相当直接的函数

126
00:06:07.290 --> 00:06:09.330
我认为它是很容易掌握的

127
00:06:09.330 --> 00:06:11.640
它隐藏了许多 ggplot 在后台操作的细节

128
00:06:11.640 --> 00:06:15.900
这在很多情况下是没问题的

129
00:06:15.900 --> 00:06:20.360
然而 ggplot() 才是系统的核心函数

130
00:06:20.360 --> 00:06:22.310
它非常灵活 因此你可以把它与许多东西组合使用

131
00:06:22.310 --> 00:06:25.190
 这是 qplot() 无法实现的
【教育无边界字幕组】October Sky | 小蟹走天下 | 詹詹詹米