WEBVTT

1
00:00:01.330 --> 00:00:04.080
R 中的 Lattice 绘图系统不同于基础绘图系统

2
00:00:04.080 --> 00:00:07.390
运行原理很不一样

3
00:00:07.390 --> 00:00:09.940
它通常在为高维数据作图

4
00:00:09.940 --> 00:00:14.065
或者一次性绘制多图的时候有用

5
00:00:14.065 --> 00:00:18.600
大家回想一下 在基础绘图系统中

6
00:00:18.600 --> 00:00:24.350
可以通过 mfrow 变量和 mfcall 变量在同一个图形设备中绘制多图

7
00:00:24.350 --> 00:00:26.430
你可以通过创建面板和图形

8
00:00:26.430 --> 00:00:27.620
来查看许多不同的特点

9
00:00:27.620 --> 00:00:29.920
而 Lattice 绘图系统

10
00:00:29.920 --> 00:00:33.240
则是通过优化这类图形

11
00:00:33.240 --> 00:00:36.090
来创建非常高密度的图

12
00:00:36.090 --> 00:00:38.190
所以在很多不同情况下它都是很有用的

13
00:00:38.190 --> 00:00:42.010
接下来我们谈谈 Lattice 绘图系统里的一些函数

14
00:00:42.010 --> 00:00:45.060
Lattice 绘图系统通过 lattice 包来实现

15
00:00:45.060 --> 00:00:47.770
所以要使用 Lattice 绘图系统必须先加载这个包

16
00:00:47.770 --> 00:00:51.880
lattice 包的基础是一个叫做 grid 的包

17
00:00:51.880 --> 00:00:55.986
它实现了 Lattice 绘图系统中许多底层的功能

18
00:00:55.986 --> 00:00:58.420
你一般不需要从 grid 包中直接调用函数

19
00:00:58.420 --> 00:01:00.980
但是也需要知道

20
00:01:00.980 --> 00:01:02.390
很多代码都是通过 grid 包实现的

21
00:01:02.390 --> 00:01:05.100
很多代码都是通过 grid 包实现的

22
00:01:06.210 --> 00:01:09.680
lattice 包是构建在 grid 包之上的

23
00:01:09.680 --> 00:01:13.850
它给你提供了不少可用的函数

24
00:01:13.850 --> 00:01:16.930
Lattice 绘图系统的一个特点是

25
00:01:16.930 --> 00:01:21.080
它并不像在基础绘图系统中一样需要用两个步骤来绘图

26
00:01:21.080 --> 00:01:23.260
回顾一下 在基础绘图系统中

27
00:01:23.260 --> 00:01:27.290
你先是创建一个图形 然后用另外的函数给它做注解

28
00:01:27.290 --> 00:01:29.510
在 Lattice 绘图系统中

29
00:01:29.510 --> 00:01:32.160
你只需要调用一个函数就能一次性创建整个图形

30
00:01:32.160 --> 00:01:35.540
所以你要在调用那个函数时指定所有的细节

31
00:01:35.540 --> 00:01:39.110
因为你之后就没有机会再为图形做注解了

32
00:01:41.580 --> 00:01:44.040
Lattice 绘图系统中的一个主要函数是 xyplot()

33
00:01:44.040 --> 00:01:46.580
它也许是最重要的函数

34
00:01:46.580 --> 00:01:49.290
这个函数基本上用来作散点图

35
00:01:49.290 --> 00:01:53.305
bwplot() 是用来作箱形图的 histogram() 用来作直方图

36
00:01:53.305 --> 00:01:57.558
stripplot() 跟 bwplot() 有点像 但是它是以点画图

37
00:01:57.558 --> 00:02:02.462
dotplot() 则在看起来像是小提琴琴弦的线上画点

38
00:02:02.462 --> 00:02:04.480
splom() 用来作散点图矩阵

39
00:02:04.480 --> 00:02:07.630
它跟基础绘图系统中的 pairs() 有些像

40
00:02:07.630 --> 00:02:11.680
levelplot() 和 contourplot() 用来绘制“图形”数据

41
00:02:11.680 --> 00:02:15.150
接下来我只大概讲一下 xyplot()

42
00:02:15.150 --> 00:02:17.070
因为我认为这是最重要的函数

43
00:02:17.070 --> 00:02:20.720
调用 xyplot() 的基本方法是用公式化的符号

44
00:02:20.720 --> 00:02:21.924
你要输入 y ~ x

45
00:02:21.924 --> 00:02:23.785
y 是你 y 轴上的东西

46
00:02:23.785 --> 00:02:25.770
x 则是你 x 轴上的东西

47
00:02:25.770 --> 00:02:27.820
然后你要输入一条竖线

48
00:02:27.820 --> 00:02:31.180
用它把条件变量和 y ~ x 分开

49
00:02:31.180 --> 00:02:32.740
而 f 和 g 是作为条件的分类变量

50
00:02:32.740 --> 00:02:36.490
而 f 和 g 是作为条件的分类变量

51
00:02:36.490 --> 00:02:39.580
例如 你可以这样解释这个函数的调用

52
00:02:39.580 --> 00:02:42.490
例如 你可以这样解释这个函数的调用

53
00:02:42.490 --> 00:02:44.860
其想法就是我想要看到 在 f 和 g 的任何一个水平下

54
00:02:44.860 --> 00:02:48.580
 y 关于 x 的散点图

55
00:02:48.580 --> 00:02:51.590
你不一定一定要用两个不同的分类变量

56
00:02:51.590 --> 00:02:57.770
我只是想告诉你们可以用两个

57
00:02:57.770 --> 00:02:58.790
第二个参数是 data

58
00:02:58.790 --> 00:03:04.820
它是包含 x、y、f 和 g 变量的数据框

59
00:03:04.820 --> 00:03:06.590
如果不输入数据框

60
00:03:06.590 --> 00:03:09.579
R 就会从你的工作空间中寻找变量来作图

61
00:03:11.640 --> 00:03:13.600
这是一个很简单的散点图

62
00:03:13.600 --> 00:03:16.190
我加载了 lattice 包和 datasets 包

63
00:03:16.190 --> 00:03:19.230
然后我对臭氧 (ozone) 和风 (wind) 变量作图 这些变量是从 airquality 数据框中得到的

64
00:03:19.230 --> 00:03:23.245
你可以看到我画出了 Ozone ~ Wind 图 我把 Ozone 设为 y 轴 Wind 设为 x 轴

65
00:03:23.245 --> 00:03:26.290
这就是你画出的散点图

66
00:03:26.290 --> 00:03:29.960
它跟基础绘图系统中画出的散点图非常像

67
00:03:29.960 --> 00:03:32.230
但是要注意默认值有些不同

68
00:03:32.230 --> 00:03:34.920
它确实使用圆圈 但是他默认将圆圈涂成蓝色

69
00:03:37.120 --> 00:03:39.876
这是一个稍加复杂的 Lattice 绘图

70
00:03:39.876 --> 00:03:41.730
我用同样的数据框

71
00:03:41.730 --> 00:03:44.760
但是将月份也作为一个因子

72
00:03:44.760 --> 00:03:48.610
现在我绘出不同月份中臭氧相对于风的图

73
00:03:48.610 --> 00:03:50.150
可以这样解释这个公式

74
00:03:50.150 --> 00:03:51.940
我想要查看每个月中臭氧和风的关系

75
00:03:51.940 --> 00:03:54.430
我想要查看每个月中臭氧和风的关系

76
00:03:54.430 --> 00:03:56.320
月份是五月、六月、七月、八月和九月

77
00:03:56.320 --> 00:03:58.640
也就是从五月到九月

78
00:03:58.640 --> 00:04:02.160
然后你可以看到臭氧和风的关系

79
00:04:02.160 --> 00:04:05.700
看起来它是随着月份改变的

80
00:04:05.700 --> 00:04:10.200
在五月和六月它们看起来没有什么关系

81
00:04:10.200 --> 00:04:13.820
但是在七月和八月 可以看到它们的关系相对更为密切

82
00:04:13.820 --> 00:04:16.610
这里的关系呈反比 更多的风意味着更少的臭氧

83
00:04:16.610 --> 00:04:18.790
然后你可以看到在九月这种联系

84
00:04:18.790 --> 00:04:20.910
开始稍微减弱

85
00:04:20.910 --> 00:04:24.290
lattice 包中的 xyplot() 的一个强大之处在于

86
00:04:24.290 --> 00:04:27.580
通过它我可以调用一个单独的函数

87
00:04:27.580 --> 00:04:30.900
方便地创建出多维的面板

88
00:04:30.900 --> 00:04:32.830
而在基础绘图系统中 你们还记得

89
00:04:32.830 --> 00:04:35.660
要调用许多许多函数来创建这个图

90
00:04:35.660 --> 00:04:37.540
在这里我只是用了一行就做到了

91
00:04:37.540 --> 00:04:39.240
这里我看到了三个不同的变量

92
00:04:39.240 --> 00:04:42.910
月份、臭氧和风

93
00:04:42.910 --> 00:04:46.840
它们都被整理到一个面板中 这是很方便的

94
00:04:48.940 --> 00:04:52.075
所以 Lattice 绘图系统的运行方式和基础绘图系统相比不太一样

95
00:04:52.075 --> 00:04:56.070
它们之间的不同之处值得注意

96
00:04:56.070 --> 00:04:59.500
基础绘图函数直接将数据绘制到图形设备中

97
00:04:59.500 --> 00:05:01.843
我们讲过有屏幕设备

98
00:05:01.843 --> 00:05:03.880
还有 pdf 文件等等各种图形设备

99
00:05:03.880 --> 00:05:06.090
Lattice 绘图系统

100
00:05:06.090 --> 00:05:08.445
并没有确切地画出任何图

101
00:05:08.445 --> 00:05:11.950
它所做的就是返回一个栅栏对象

102
00:05:11.950 --> 00:05:14.506
然后这个对象被输出

103
00:05:14.506 --> 00:05:18.720
这样图形的数据才能传递到图形设备中去

104
00:05:18.720 --> 00:05:21.350
所以这里有两个步骤

105
00:05:21.350 --> 00:05:24.980
但大多数时候它们对用户是不可见的

106
00:05:24.980 --> 00:05:28.470
因为当你在调用像 xypot() 这样的函数时

107
00:05:28.470 --> 00:05:34.040
它返回一个栅栏对象 然后会自动输出该对象

108
00:05:34.040 --> 00:05:37.330
R 的自动输出特性

109
00:05:37.330 --> 00:05:39.860
使得图形被自动地发送到图形设备中

110
00:05:39.860 --> 00:05:44.600
所以大多时候你不需要考虑到这两个步骤

111
00:05:44.600 --> 00:05:48.120
但值得注意的是 理论上说你可以将图形对象赋给一个 R 对象

112
00:05:48.120 --> 00:05:51.210
这个对象会保存在你的工作空间中

113
00:05:51.210 --> 00:05:54.130
所以理论上你可以储存该对象

114
00:05:54.130 --> 00:05:56.500
但这样做也许并不明智

115
00:05:56.500 --> 00:05:59.920
更好的做法是储存生成图形和数据的代码

116
00:06:01.820 --> 00:06:05.120
你可以通过这里一点简单的代码了解 Lattice 绘图的特性

117
00:06:05.120 --> 00:06:07.330
这里我调用了 xyplot()

118
00:06:07.330 --> 00:06:10.440
把它赋给一个叫做 p 的对象 然后我输出 p

119
00:06:10.440 --> 00:06:11.700
于是图形就出现了

120
00:06:11.700 --> 00:06:14.170
运行这段代码时 在第一行代码运行后

121
00:06:14.170 --> 00:06:16.980
什么都不会发生 但在运行完第二行代码后 图形就会出现

122
00:06:16.980 --> 00:06:19.840
所以如果你只是调用了 xyplot()

123
00:06:19.840 --> 00:06:21.830
那么你就利用到了 R 自动输出的特性
【教育无边界字幕组】迈迈的手套 | LennyBear | hazard1990