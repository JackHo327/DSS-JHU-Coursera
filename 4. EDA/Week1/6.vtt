WEBVTT

1
00:00:01.690 --> 00:00:03.940
我现在打开了 R 我要做的是通过一些简单的绘图

2
00:00:03.940 --> 00:00:06.260
来展示绘图选项的一些基本操作

3
00:00:06.260 --> 00:00:09.298
来展示绘图选项的一些基本操作

4
00:00:09.298 --> 00:00:10.670
我先在这里生成一组用于绘图的数据

5
00:00:10.670 --> 00:00:12.240
我先在这里生成一组用于绘图的数据

6
00:00:13.850 --> 00:00:16.058
这里生成了100个随机变量

7
00:00:16.058 --> 00:00:20.080
接着调用 hist() 生成一个直方图 (histogram)

8
00:00:20.080 --> 00:00:24.600
我们马上发现调用了 hist() 之后 会弹出图像窗口

9
00:00:24.600 --> 00:00:26.290
把它移到这里来

10
00:00:26.290 --> 00:00:26.870
这就是用刚才那些数据生成的直方图

11
00:00:26.870 --> 00:00:30.150
这就是用刚才那些数据生成的直方图

12
00:00:30.150 --> 00:00:33.390
可以发现 尽管我除了数据之外没有指定任何参数

13
00:00:33.390 --> 00:00:37.870
在这幅图里 还是会出现其它东西

14
00:00:39.040 --> 00:00:40.120
(这些东西) 不需要我去指定它们

15
00:00:40.120 --> 00:00:41.590
比如这里的标题

16
00:00:42.690 --> 00:00:45.280
然后是 x 标签

17
00:00:45.280 --> 00:00:49.130
因为这是我在调用 hist() 时引用的对象

18
00:00:50.140 --> 00:00:52.290
这个标签是 Frequence (频率)

19
00:00:52.290 --> 00:00:57.170
它也是直方图的默认项 告诉你在指定范围内元素的数量

20
00:00:57.170 --> 00:01:00.530
比方说从 -1 到 0

21
00:01:00.530 --> 00:01:04.950
在这个范围里大概有30个元素

22
00:01:04.950 --> 00:01:10.049
可以看到这个直方图看起来像是服从正态分布

23
00:01:10.049 --> 00:01:14.126
我在这里多生成一些数据

24
00:01:14.126 --> 00:01:17.416
然后我们可以用散点 (scatter) 图

25
00:01:17.416 --> 00:01:20.341
我先生成一些数据 接着输入 plot(x,y)

26
00:01:20.341 --> 00:01:22.906
现在 绘图窗口已经打开了

27
00:01:22.906 --> 00:01:25.950
所以当我调用 plot() 时 不会再打开一个新的绘图窗口

28
00:01:25.950 --> 00:01:29.496
而是把新的图绘到当前的绘图窗口 也就是这个窗口

29
00:01:29.496 --> 00:01:33.580
我已经调用了 plot()

30
00:01:33.580 --> 00:01:35.710
你可以看到这些点混合组成的散点图

31
00:01:37.430 --> 00:01:39.770
这里默认的绘图符号是一个空心圆

32
00:01:39.770 --> 00:01:42.540
注意看这里的标签

33
00:01:42.540 --> 00:01:45.870
除了 x 和 y  之外我没有指定任何其它东西

34
00:01:45.870 --> 00:01:47.510
但是在这个图里面出现了一些其它东西

35
00:01:47.510 --> 00:01:50.505
例如  这里的 x 被设置为 x 轴的标签

36
00:01:50.505 --> 00:01:53.760
而 y 轴的标签则被设置为 y

37
00:01:53.760 --> 00:01:56.290
如果我改变了对象的名称

38
00:01:56.290 --> 00:02:00.310
比如我在这里输入 rnorm(100) 然后我对 x 和 z 作图

39
00:02:01.450 --> 00:02:04.140
这个图看起来不太一样 因为数据不一样

40
00:02:04.140 --> 00:02:07.650
而你可以看到 这里标签已经变成了 z

41
00:02:07.650 --> 00:02:11.530
也就是指定对象的名称 那么让我们回到 x 和 y

42
00:02:14.700 --> 00:02:16.430
在绘图区域会出现一些重要的东西

43
00:02:16.430 --> 00:02:20.940
比方说这些空白

44
00:02:20.940 --> 00:02:23.440
四条边上各有一个空白

45
00:02:23.440 --> 00:02:24.240
这是第一条边

46
00:02:24.240 --> 00:02:26.328
这是第二条边

47
00:02:26.328 --> 00:02:30.480
这里是第三条和第四条边

48
00:02:30.480 --> 00:02:33.380
可以看到 底部的空白是最大的

49
00:02:35.560 --> 00:02:36.930
可以看到 底部的空白是最大的

50
00:02:36.930 --> 00:02:41.620
一共有5行空行

51
00:02:41.620 --> 00:02:45.790
在第二条边上有4列空行

52
00:02:45.790 --> 00:02:47.720
在顶部的第三条边也有4行空行

53
00:02:47.720 --> 00:02:50.030
右边的第四条边则是空白最少的

54
00:02:50.030 --> 00:02:54.790
右边的第四条边则是空白最少的

55
00:02:54.790 --> 00:02:56.780
你可以通过 mar 参数来调整空白

56
00:02:56.780 --> 00:03:00.960
例如 我想要每边空白为2行 可以输入 par(mar = c(2,2,2,2))

57
00:03:00.960 --> 00:03:03.880
例如 我想要每边空白为2行 可以输入 par(mar = c(2,2,2,2))

58
00:03:03.880 --> 00:03:07.430
接着我再进行绘图

59
00:03:08.920 --> 00:03:12.439
可以看到所有的空白都变小了

60
00:03:12.439 --> 00:03:16.830
而图像则占据了窗口更多的空间

61
00:03:16.830 --> 00:03:21.420
但是你可以看到 x 轴和 y 轴的标签消失了

62
00:03:21.420 --> 00:03:25.750
尽管我的刻度线还在 但是标签已经不见了

63
00:03:25.750 --> 00:03:26.200
所以我们可能要把空白调得稍微大一点

64
00:03:26.200 --> 00:03:27.750
所以我们可能要把空白调得稍微大一点

65
00:03:27.750 --> 00:03:29.444
比如 (4,4,2,2) 这样

66
00:03:31.190 --> 00:03:32.100
比如 (4,4,2,2) 这样

67
00:03:32.100 --> 00:03:34.600
现在如果我再执行绘图的话

68
00:03:34.600 --> 00:03:37.500
可以看的现在已经有足够的空间来放下 x 和 y 的标签了

69
00:03:37.500 --> 00:03:41.310
接下来我要演示其它绘图时你可能会感兴趣的选项

70
00:03:41.310 --> 00:03:43.980
接下来我要演示其它绘图时你可能会感兴趣的选项

71
00:03:43.980 --> 00:03:49.940
首先是绘图符号 我可以输入 plot(x, y, pch = 20)

72
00:03:49.940 --> 00:03:52.390
图中的点变成了实心圆

73
00:03:52.390 --> 00:03:55.283
我想要一个稍大的圆的话 可以令 pch=19

74
00:03:56.970 --> 00:03:59.430
或者我可以令 pch=2 得到三角形

75
00:03:59.430 --> 00:04:04.770
3则代表+ (加号) 4表示× (叉号) 诸如此类

76
00:04:04.770 --> 00:04:06.090
所以这里有很多不同的符号可以尝试

77
00:04:06.090 --> 00:04:09.600
你可能在想我是怎么知道这些绘图符号对应的编码

78
00:04:09.600 --> 00:04:11.940
你可能在想我是怎么知道这些绘图符号对应的编码

79
00:04:11.940 --> 00:04:15.070
其实这只不过是多年累积的经验 我记住了绝大多数符号编码

80
00:04:15.070 --> 00:04:17.830
当然 如果你未能记住的话

81
00:04:17.830 --> 00:04:22.100
points 的 example 文件是一个方便的工具

82
00:04:22.100 --> 00:04:25.470
比如 你可以输入 example(points)

83
00:04:25.470 --> 00:04:26.950
R 会自动给出一些示例

84
00:04:26.950 --> 00:04:32.030
这样你可以了解 R 在绘图方面的功能

85
00:04:32.030 --> 00:04:35.240
但是最重要的是这里的符号表

86
00:04:35.240 --> 00:04:36.640
但是最重要的是这里的符号表

87
00:04:37.670 --> 00:04:39.730
例如这里的 1表示圆圈

88
00:04:39.730 --> 00:04:43.000
2表示三角形 3表示加号 等等

89
00:04:43.000 --> 00:04:48.350
20表示小的实心圆 19则表示大一点的实心圆

90
00:04:48.350 --> 00:04:53.710
15表示实心正方形 17则是实心三角形 等等

91
00:04:53.710 --> 00:04:54.210
所以你可以使用这些数字来指定你想要的符号

92
00:04:56.500 --> 00:05:00.550
所以你可以使用这些数字来指定你想要的符号

93
00:05:00.550 --> 00:05:04.340
另外 注意21至25这些符号

94
00:05:04.340 --> 00:05:07.350
它们实际上跟之前的1到6这几个符号是类似的

95
00:05:07.350 --> 00:05:10.920
它们实际上跟之前的1到6这几个符号是类似的

96
00:05:10.920 --> 00:05:16.310
两者的区别在于 21至25这些符号都有轮廓

97
00:05:16.310 --> 00:05:21.710
因此例子里 你看到它们的边是红色的 内部则填充为黄色

98
00:05:21.710 --> 00:05:22.540
因此例子里 你看到它们的边是红色的 内部则填充为黄色

99
00:05:22.540 --> 00:05:24.540
你可以指定这两个不同的颜色

100
00:05:24.540 --> 00:05:27.820
一个是轮廓的颜色 一个则是填充的颜色

101
00:05:28.890 --> 00:05:34.310
我们用 col 参数来指定轮廓的颜色

102
00:05:34.310 --> 00:05:40.730
填充的背景颜色则用 bg 参数来指定

103
00:05:40.730 --> 00:05:42.970
因此 你可以像这样指定两种不同的颜色

104
00:05:45.300 --> 00:05:46.150
因此 你可以像这样指定两种不同的颜色

105
00:05:46.150 --> 00:05:50.140
这里是另一个绘图符号表

106
00:05:52.380 --> 00:05:56.770
你可以继续探索演示上的这些东西

107
00:05:56.770 --> 00:05:58.690
我就到此为止吧

108
00:06:00.120 --> 00:06:02.460
这里是一些你可以用来绘图的特殊符号

109
00:06:04.780 --> 00:06:10.550
这是一些不同的字体 让我退出这个演示

110
00:06:10.550 --> 00:06:14.920
那么 这就是改变符号显示的一种方法

111
00:06:14.920 --> 00:06:17.420
现在我回到刚才的图里面来 令 pch=20

112
00:06:19.540 --> 00:06:20.290
现在我回到刚才的图里面来 令 pch=20

113
00:06:22.690 --> 00:06:23.650
不好意思

114
00:06:23.650 --> 00:06:28.215
我需要重新生成我的数据 因为原始数据在刚才示例中给刷掉了

115
00:06:28.215 --> 00:06:37.700
好的 这里就是我的数据

116
00:06:37.700 --> 00:06:39.580
以及我的散点图

117
00:06:39.580 --> 00:06:42.870
我可以用 title() 给这个图加上一个标题

118
00:06:42.870 --> 00:06:44.640
我就叫它 Scatterplot

119
00:06:47.110 --> 00:06:49.230
这样就添加了一个标题

120
00:06:49.230 --> 00:06:51.800
我也可以加入一些文字

121
00:06:51.800 --> 00:06:54.710
比如 我可以用 text() 函数在这里加上一个 Label

122
00:06:56.870 --> 00:07:05.050
我要给它一个坐标 比方说 (-2,-2)

123
00:07:05.050 --> 00:07:06.320
 Label 字样就出现在了这里

124
00:07:06.320 --> 00:07:10.560
我还可以给这个图加上一个图例

125
00:07:10.560 --> 00:07:14.790
你还可以指定这个图例的位置

126
00:07:14.790 --> 00:07:18.530
例如 "topleft" 会把图例放在图像的左上角

127
00:07:18.530 --> 00:07:19.420
我就给它一个简单的标签好了 再给它加上一个绘图符号

128
00:07:22.130 --> 00:07:25.890
我就给它一个简单的标签好了 再给它加上一个绘图符号

129
00:07:25.890 --> 00:07:29.460
现在我就有了一个图例

130
00:07:30.770 --> 00:07:33.180
在使用过程中还可以给数据添加许多注释

131
00:07:33.180 --> 00:07:37.850
在使用过程中还可以给数据添加许多注释

132
00:07:37.850 --> 00:07:42.230
比方说 我要将数据拟合成一条直线 我可以使用线形模型

133
00:07:42.230 --> 00:07:47.150
先用 lm() 接着用 abline()

134
00:07:47.150 --> 00:07:50.650
这样就能把拟合直线添加到图像中 但这里数据间没有什么关联

135
00:07:50.650 --> 00:07:56.090
所以这条直线相当的平缓

136
00:07:56.090 --> 00:07:59.340
如果我想要调整这条直线的粗细的话

137
00:07:59.340 --> 00:08:05.060
我可以使用 abline() 并指定 lwd 参数

138
00:08:05.060 --> 00:08:06.820
例如 让它等于 3

139
00:08:06.820 --> 00:08:07.340
你可以看到

140
00:08:07.340 --> 00:08:10.870
原来那条线上面多了一条新的更粗的线

141
00:08:10.870 --> 00:08:12.560
你大概不会想重新作图

142
00:08:12.560 --> 00:08:13.130
你大概不会想重新作图

143
00:08:13.130 --> 00:08:14.880
但如果你想要重新做这个图的话

144
00:08:14.880 --> 00:08:17.530
你只需要在一开始将 lwd 的值加到3

145
00:08:17.530 --> 00:08:19.980
你大概不希望看到两条线重叠

146
00:08:19.980 --> 00:08:22.960
我在这里是为了演示而做的

147
00:08:24.090 --> 00:08:26.020
我还可以改变它的颜色

148
00:08:26.020 --> 00:08:30.460
比方说把它变成蓝色 这样就它就变成了蓝色

149
00:08:31.520 --> 00:08:35.590
你在绘图的时候还有很多的选项可以进行设置

150
00:08:35.590 --> 00:08:37.130
你在绘图的时候还有很多的选项可以进行设置

151
00:08:39.380 --> 00:08:42.230
通常来说 你会想要创建更具体的 x 和 y 标签

152
00:08:42.230 --> 00:08:45.970
通常来说 你会想要创建更具体的 x 和 y 标签

153
00:08:45.970 --> 00:08:49.490
你可以把很多选项都加到 plot() 函数里面

154
00:08:49.490 --> 00:08:54.930
比方说 plot(x, y, xlab="Weight", ylab="Height", main= "Scatterplot", pch = 20)

155
00:08:56.020 --> 00:08:59.090
比方说 plot(x, y, xlab="Weight", ylab="Height", main= "Scatterplot", pch = 20)

156
00:09:01.320 --> 00:09:03.304
比方说 plot(x, y, xlab="Weight", ylab="Height", main= "Scatterplot", pch = 20)

157
00:09:06.750 --> 00:09:08.970
比方说 plot(x, y, xlab="Weight", ylab="Height", main= "Scatterplot", pch = 20)

158
00:09:08.970 --> 00:09:12.400
现在我的 x 和 y 轴就具备有实际意义的标签了

159
00:09:12.400 --> 00:09:14.200
我还可以把我的图例放回去

160
00:09:15.670 --> 00:09:17.590
这次把它放在右上角

161
00:09:23.990 --> 00:09:28.495
接着 我可以把拟合直线放进来

162
00:09:28.495 --> 00:09:36.578
接着 我可以把拟合直线放进来

163
00:09:36.578 --> 00:09:39.718
这次我把线改成红色的

164
00:09:39.718 --> 00:09:43.680
好的 这就是我的图像 还有线性回归直线

165
00:09:43.680 --> 00:09:44.570
以及图例

166
00:09:46.710 --> 00:09:50.610
现在看看 在一个窗口绘制超过一个图像时会发生什么情况

167
00:09:50.610 --> 00:09:53.720
比方说 假如我有另外一个变量 z

168
00:09:53.720 --> 00:09:56.350
它是一个泊松型 (Poisson) 的数据

169
00:09:57.890 --> 00:09:58.660
噢 不好意思

170
00:10:01.010 --> 00:10:03.660
假如我想要给出 z 关于 x 的图像

171
00:10:03.660 --> 00:10:07.100
并且把这幅图和 y 关于 x 的图像放在一个画布上

172
00:10:07.100 --> 00:10:10.030
首先 我可以这样

173
00:10:10.030 --> 00:10:12.170
如果我想要把一个图放到另外一个上面

174
00:10:12.170 --> 00:10:17.430
我们可以用 par(mfrow = c(2, 1))

175
00:10:17.430 --> 00:10:20.720
这就是建立一个有两行一列的图像

176
00:10:20.720 --> 00:10:23.510
也就是我们想要看到的

177
00:10:23.510 --> 00:10:26.060
现在我把 x-y图像绘制在上面 x-z图像绘制在下面

178
00:10:26.060 --> 00:10:29.090
输入 plot(x, y, pch=20)

179
00:10:29.090 --> 00:10:35.070
可以看到它出现在了上面

180
00:10:35.070 --> 00:10:41.440
而下面的区域则是 plot(x, z, pch=19) 它就出现在下面了

181
00:10:41.440 --> 00:10:43.130
现在你可以看到这些空白有点大了

182
00:10:43.130 --> 00:10:45.980
比我们想象中要大一点

183
00:10:47.030 --> 00:10:50.450
而我设定的空白是这样的

184
00:10:51.910 --> 00:10:52.340
而我设定的空白是这样的

185
00:10:52.340 --> 00:10:53.170
而我设定的空白是这样的

186
00:10:53.170 --> 00:10:55.810
现在我们想要调整一下空白的大小

187
00:10:55.810 --> 00:11:00.930
因为我们已经重新调整过了图像

188
00:11:00.930 --> 00:11:02.290
我们可以令

189
00:11:06.880 --> 00:11:08.420
par(mar = c(2, 2, 1, 1))

190
00:11:12.790 --> 00:11:13.940
现在我们再做一次图的话

191
00:11:16.750 --> 00:11:17.790
图像就变得大了一点

192
00:11:23.180 --> 00:11:24.390
现在是20吧

193
00:11:24.390 --> 00:11:28.760
现在我把两个图像放在了屏幕上

194
00:11:28.760 --> 00:11:30.190
我也可以用另外一种方式

195
00:11:30.190 --> 00:11:31.530
我可以让它们左右排列而不是上下排列

196
00:11:31.530 --> 00:11:33.750
我可以让它们左右排列而不是上下排列

197
00:11:33.750 --> 00:11:39.380
我可以输入 par(mfrow = c(1,2))

198
00:11:39.380 --> 00:11:40.650
现在我就可以这样绘图

199
00:11:44.530 --> 00:11:44.930
现在我就可以这样绘图

200
00:11:44.930 --> 00:11:46.640
你可以看到 我把空白设置得太过于小了些

201
00:11:46.640 --> 00:11:50.050
我的 y 轴标签不见了

202
00:11:50.050 --> 00:11:51.526
我可以输入 par(mar = c(4, 4, 2, 2))

203
00:11:51.526 --> 00:11:54.440
我可以输入 par(mar = c(4, 4, 2, 2))

204
00:11:55.810 --> 00:11:56.880
然后再绘图

205
00:12:00.440 --> 00:12:00.750
然后再绘图

206
00:12:00.750 --> 00:12:05.490
所以你可以发现 当你改变了绘图的布局之后

207
00:12:05.490 --> 00:12:09.960
你也需要改变画布来去掉那些空白的部分

208
00:12:09.960 --> 00:12:12.980
我将跳过这个部分 继续演示

209
00:12:12.980 --> 00:12:15.450
比方说 你可以在把四个图放在一个页面上

210
00:12:15.450 --> 00:12:20.670
比方说 par(mfrow = c(2, 2))

211
00:12:20.670 --> 00:12:25.370
这表示两行两列 然后我可以输入 plot(x, y)

212
00:12:26.810 --> 00:12:29.310
它就到了左上角 接着是 plot(x, z)

213
00:12:29.310 --> 00:12:31.170
你可能回想 下一个图像会出现在哪里？

214
00:12:31.170 --> 00:12:35.540
实际上 因为我指定了 mfrow 所以这些图像会先填满一行

215
00:12:35.540 --> 00:12:37.240
所以下一个图像会出现在右上角

216
00:12:38.270 --> 00:12:40.210
接下来一个图像则是在左下角

217
00:12:40.210 --> 00:12:42.500
这里我们输入 plot(z, x) 而不是 x 和 z

218
00:12:45.400 --> 00:12:48.890
最后一个图像则会在右下角出现

219
00:12:49.910 --> 00:12:52.240
现在我在这一页上有了四个图像

220
00:12:52.240 --> 00:12:56.410
而这只要通过指定 mfrow 选项即可

221
00:12:56.410 --> 00:13:00.810
如果我指定的是 mfcol 的话 我仍然会有四个图像

222
00:13:00.810 --> 00:13:04.650
但是它们出现的顺序会变得不同

223
00:13:06.760 --> 00:13:08.370
现在我输入 plot(x, y) 它出现在了同样的地方

224
00:13:08.370 --> 00:13:13.080
但是下一个图像则会出现在左下角

225
00:13:13.080 --> 00:13:14.720
再接着则是右上角

226
00:13:14.720 --> 00:13:16.400
最后一个图像在右下角

227
00:13:17.450 --> 00:13:20.190
这就是 mfrow 和 mfcol 之间的区别

228
00:13:22.540 --> 00:13:27.650
最后我想要介绍的是 points()

229
00:13:27.650 --> 00:13:32.240
给大家演示一下如何通过添加一些内容来给图像注释

230
00:13:32.240 --> 00:13:34.280
我先把绘图区域重置一下

231
00:13:34.280 --> 00:13:36.030
改成只绘制一幅图像

232
00:13:39.370 --> 00:13:41.650
假设我现在生成一些数据

233
00:13:41.650 --> 00:13:44.030
这些数据包括了男性和女性

234
00:13:44.030 --> 00:13:45.690
那么我们就有了两组人

235
00:13:45.690 --> 00:13:48.850
现在我就来生成一些数据

236
00:13:50.570 --> 00:13:52.470
并且给它们加上一些关系

237
00:13:52.470 --> 00:13:53.760
这样会更加有趣

238
00:13:56.880 --> 00:14:01.860
再假设我有另外一个变量 g 来表示组

239
00:14:01.860 --> 00:14:06.460
我把这个变量分成相等的两个部分 每个部分有50次的迭代

240
00:14:06.460 --> 00:14:07.820
再给它们命名一下

241
00:14:07.820 --> 00:14:08.750
分别命名为 Male 以及 Female

242
00:14:14.280 --> 00:14:18.500
现在我在人群中得到男性组和女性组

243
00:14:18.500 --> 00:14:21.140
可以看到它是一个水平为 2 的因子变量

244
00:14:21.140 --> 00:14:23.120
假设我想要把这些数据画出来

245
00:14:23.120 --> 00:14:25.910
如果我仅仅输入 plot(x, y)

246
00:14:25.910 --> 00:14:27.780
你分不出哪个是男性哪个是女性 对吧？

247
00:14:27.780 --> 00:14:31.970
因为它们都是一样的颜色

248
00:14:31.970 --> 00:14:33.580
假如我想要在绘图时把男性设置为一种颜色

249
00:14:33.580 --> 00:14:36.080
女性设置为另外一种颜色

250
00:14:36.080 --> 00:14:37.070
我该怎么做呢？

251
00:14:37.070 --> 00:14:39.300
首先你要做的是

252
00:14:39.300 --> 00:14:41.170
设立绘图区域

253
00:14:41.170 --> 00:14:42.830
但是不绘制任何数据

254
00:14:44.030 --> 00:14:48.430
接着再依据性别添加数据

255
00:14:48.430 --> 00:14:50.910
你可以先把女性数据加进去 再把男性加进去

256
00:14:50.910 --> 00:14:53.280
每次加入数据时

257
00:14:53.280 --> 00:14:56.810
给它们一个不同的颜色 或者是不同的绘图符号等等

258
00:14:56.810 --> 00:14:58.710
那么我们先建立一个绘图区域

259
00:14:58.710 --> 00:15:02.660
我先对 x 和 y 作图

260
00:15:02.660 --> 00:15:04.350
但是我把 type 设置为 n

261
00:15:04.350 --> 00:15:07.840
这表示绘制图像 但是先不要把数据放进去

262
00:15:07.840 --> 00:15:09.130
你可以看到 当我按下运行之后

263
00:15:09.130 --> 00:15:13.480
一切都跟之前一样

264
00:15:13.480 --> 00:15:14.580
标签有了

265
00:15:14.580 --> 00:15:17.250
刻度线有了 边缘空白也有了

266
00:15:17.250 --> 00:15:19.170
所有东西都有了 唯独没有数据

267
00:15:19.170 --> 00:15:20.730
只有数据没有加进去

268
00:15:20.730 --> 00:15:24.450
接下来我要做的是

269
00:15:24.450 --> 00:15:26.410
按组别依次加入数据

270
00:15:26.410 --> 00:15:29.490
假如我想要先加入男性数据 我可以输入 points(x)

271
00:15:29.490 --> 00:15:32.240
然后只取 x 当中 g 为 Male 的子集

272
00:15:32.240 --> 00:15:34.530
然后只取 x 当中 g 为 Male 的子集

273
00:15:34.530 --> 00:15:35.510
这就是一个子集

274
00:15:35.510 --> 00:15:40.430
然后再取 y 当中 g 为 Male 的子集

275
00:15:40.430 --> 00:15:46.430
这命令会把所有 g 值为 Male 的点画出来

276
00:15:46.430 --> 00:15:50.590
然后把它的颜色设为绿色

277
00:15:53.610 --> 00:15:54.640
好了

278
00:15:54.640 --> 00:15:57.740
现在你能看到屏幕上的点都是绿色的了

279
00:15:57.740 --> 00:16:00.510
它们是表示男性的点

280
00:16:00.510 --> 00:16:02.040
对于女性数据我也可以做同样的操作

281
00:16:02.040 --> 00:16:04.480
我可以输入 points(x[ g=="Female"], y[g=="Female", col="Blue")

282
00:16:06.020 --> 00:16:08.900
我可以输入 points(x[ g=="Female"], y[g=="Female", col="Blue")

283
00:16:10.810 --> 00:16:12.880
我可以输入 points(x[ g=="Female"], y[g=="Female", col="Blue")

284
00:16:15.140 --> 00:16:18.280
现在你可以看到图上有了代表女性的蓝色圆圈

285
00:16:18.280 --> 00:16:20.400
还有代表男性的绿色圆圈

286
00:16:20.400 --> 00:16:24.710
两个组分别出现在同一个散点图里了

287
00:16:24.710 --> 00:16:28.860
根据变量分组取子集 在绘图中是很常见的

288
00:16:28.860 --> 00:16:33.800
而 points() 函数可以根据分组依次添加点

289
00:16:33.800 --> 00:16:36.960
你可以给每个组指定不同的属性

290
00:16:36.960 --> 00:16:38.700
除了变化颜色之外

291
00:16:38.700 --> 00:16:40.200
还可以改变绘图符号

292
00:16:40.200 --> 00:16:42.110
我可以令 pch = 19

293
00:16:42.110 --> 00:16:44.670
这里的点就变成了实心圆

294
00:16:44.670 --> 00:16:46.500
现在的图像就变成了蓝色实心圆代表女性

295
00:16:46.500 --> 00:16:50.060
绿色空心圆代表男性

296
00:16:50.060 --> 00:16:52.630
这是一种在一张散点图中把分组数据区别开来的方法

297
00:16:52.630 --> 00:16:55.060
这是一种在一张散点图中把分组数据区别开来的方法
【教育无边界字幕组】三又木君 | 方程 | 詹詹詹米