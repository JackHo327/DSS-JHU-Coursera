WEBVTT

1
00:00:00.680 --> 00:00:04.440
你会使用到一些关键的基础绘图函数

2
00:00:04.440 --> 00:00:07.480
当然 首先是可以绘制散点图的 plot() 函数

3
00:00:08.500 --> 00:00:09.870
根据你要绘制的对象的特定类型

4
00:00:09.870 --> 00:00:12.190
它也可以绘制其他类型的图

5
00:00:12.190 --> 00:00:14.210
它也可以绘制其他类型的图

6
00:00:14.210 --> 00:00:15.829
但大多数时候 我们通常用它来做散点图

7
00:00:17.115 --> 00:00:21.300
lines() 作为函数并不能生成图形 但它可以在图上加线条 

8
00:00:21.300 --> 00:00:25.855
有时你想将许多点连在一起 

9
00:00:25.855 --> 00:00:27.610
如时间序列那种类型的图

10
00:00:27.610 --> 00:00:28.940
如果你想画的是折线图而不是散点图

11
00:00:28.940 --> 00:00:32.559
这个函数就很有用

12
00:00:33.690 --> 00:00:35.870
points() 函数可以往图上增加点

13
00:00:35.870 --> 00:00:37.440
有时在创建了图形之后

14
00:00:37.440 --> 00:00:38.940
你会想添加一些其他的点

15
00:00:38.940 --> 00:00:42.050
它可能代表不同的组或不同人口的子集

16
00:00:42.050 --> 00:00:46.640
text() 就像标签 你可以用它对图形进行文本注释

17
00:00:46.640 --> 00:00:51.400
text() 用于在图内添加标签

18
00:00:51.400 --> 00:00:54.280
而 title() 函数往往用于图外添加注释

19
00:00:54.280 --> 00:00:59.140
像是 x、y 轴签 标题 副标题等等

20
00:00:59.140 --> 00:01:01.890
mtext() 的 m 表示页边距

21
00:01:01.890 --> 00:01:04.480
所以这个函数用于将文本放在图的页边距中

22
00:01:04.480 --> 00:01:06.375
可以是内边距或者外边距

23
00:01:06.375 --> 00:01:09.400
axis() 函数用于指定轴刻度

24
00:01:11.360 --> 00:01:13.600
这里有一些例子 说明了如何作图

25
00:01:13.600 --> 00:01:16.480
如何添加数据和进行注释

26
00:01:16.480 --> 00:01:19.150
这里我绘制了之前那个 Wind 和 Ozone 的散点图

27
00:01:19.150 --> 00:01:22.640
但现在我在图像顶端添加了标题

28
00:01:22.640 --> 00:01:25.310
这里我添加的是 “Ozone and Wind in New York City”

29
00:01:27.510 --> 00:01:29.065
在这个图里 我又做了一个散点图

30
00:01:29.065 --> 00:01:31.530
但我没有用 title() 来添加标题

31
00:01:31.530 --> 00:01:34.950
而只是将标题直接传递到了 plot() 当中

32
00:01:34.950 --> 00:01:38.940
接着我想取子集

33
00:01:38.940 --> 00:01:43.370
我想用另外一种颜色将所有5月的数据点绘制出来

34
00:01:43.370 --> 00:01:44.860
所以我先对数据框取子集

35
00:01:44.860 --> 00:01:47.018
取出观测数据中月份等于5的数据

36
00:01:47.018 --> 00:01:53.210
然后我用 points() 函数 做类似重新加点的操作

37
00:01:53.210 --> 00:01:54.350
但这次我将它们的颜色设置为蓝色

38
00:01:54.350 --> 00:01:58.480
所以你可以在下图中看到它们

39
00:01:58.480 --> 00:02:02.680
蓝点的子集 对应着5月份的数据点

40
00:02:05.250 --> 00:02:11.915
我还可以取更多的子集 并用不同颜色将它们标示出来

41
00:02:11.915 --> 00:02:17.260
你可以看到 我在初始化图的时候

42
00:02:17.260 --> 00:02:19.910
增加了一个参数 type="n" 

43
00:02:19.910 --> 00:02:23.370
type=“n” 的意思是它只是初步作图

44
00:02:23.370 --> 00:02:24.820
初始化了图形设备

45
00:02:24.820 --> 00:02:27.580
但实际上并没有绘制任何东西

46
00:02:27.580 --> 00:02:30.120
也就是说它没有在绘图区域中画出任何东西

47
00:02:30.120 --> 00:02:30.430
它只是设置了图中的其他部分

48
00:02:30.430 --> 00:02:34.600
并无实际数据

49
00:02:34.600 --> 00:02:36.980
为了把数据放入图中

50
00:02:36.980 --> 00:02:40.600
我将对数据框取子集

51
00:02:40.600 --> 00:02:44.210
加入5月和非5月的数据

52
00:02:44.210 --> 00:02:47.110
我会将5月的数据设置成蓝色

53
00:02:47.110 --> 00:02:50.810
其他的则设置成红色

54
00:02:50.810 --> 00:02:52.360
你可以看到其他所有的点都是红色的

55
00:02:52.360 --> 00:02:55.430
所以这一次 我就不用再画一次

56
00:02:55.430 --> 00:02:59.090
就能准确地看出 哪些数据是蓝色的 是5月的

57
00:02:59.090 --> 00:03:02.660
最后一步 我在图的右上角加上了图例

58
00:03:02.660 --> 00:03:09.260
这样就可以区分开哪些是5月的数据 哪些不是

59
00:03:09.260 --> 00:03:13.590
最后 通常你会想要在图中添加一条回归线

60
00:03:13.590 --> 00:03:15.280
最后 通常你会想要在图中添加一条回归线

61
00:03:15.280 --> 00:03:16.430
或是平滑线

62
00:03:16.430 --> 00:03:19.680
而这里的散点图上 我已经添加了这条回归线

63
00:03:19.680 --> 00:03:20.540
我先做了一个散点图 

64
00:03:20.540 --> 00:03:23.370
可以注意到 我改变了缺省值

65
00:03:23.370 --> 00:03:25.630
将绘图符号参数 pch 设置为20

66
00:03:25.630 --> 00:03:29.500
20代表的是小实心圆

67
00:03:29.500 --> 00:03:34.160
然后我使用 lm() 函数对数据进行线性拟合

68
00:03:34.160 --> 00:03:36.070
再调用 abline() 函数

69
00:03:36.070 --> 00:03:39.440
它是另一个注释函数

70
00:03:39.440 --> 00:03:42.850
然后我将线性模型对象传递给它

71
00:03:42.850 --> 00:03:45.570
并将 lwd 参数设置为2

72
00:03:45.570 --> 00:03:47.220
表示它比默认的线条宽度要粗

73
00:03:47.220 --> 00:03:50.190
abline() 可以读出回归模型的输出

74
00:03:50.190 --> 00:03:52.750
然后以给定的截距 (intercept) 和斜率 (slope) 画一条线 

75
00:03:52.750 --> 00:03:56.610
大家可以看到 我已经将回归线加到图上去了

76
00:03:56.610 --> 00:03:59.560
你可以看到下降的趋势

77
00:04:02.630 --> 00:04:05.270
至此所有的例子

78
00:04:05.270 --> 00:04:07.950
都是在图形设备上绘制单个图形的例子

79
00:04:07.950 --> 00:04:11.820
但有时你想在一个图形设备上画多个图

80
00:04:11.820 --> 00:04:15.050
这里我画了两个图 一个是 Ozone 和 Wind

81
00:04:15.050 --> 00:04:18.910
另一个是 Ozone 和 Solar Radiation 这些数据来自同一个数据集

82
00:04:18.910 --> 00:04:20.150
为了做到这一点

83
00:04:20.150 --> 00:04:23.760
我只要将 par() 中的 mfrow 参数设置为 c(1,2)

84
00:04:23.760 --> 00:04:26.420
这样我就可以让这两个图并排显示

85
00:04:26.420 --> 00:04:28.190
然后我调用两次 plot()

86
00:04:28.190 --> 00:04:31.860
每次调用 plot() 它都会产生一个新图

87
00:04:31.860 --> 00:04:35.090
第一个图会落在左手边

88
00:04:35.090 --> 00:04:36.390
第二个图会在右手边

89
00:04:36.390 --> 00:04:39.780
这就是 mfrow 的用法

90
00:04:41.620 --> 00:04:47.840
现在你可以看到 当我画多个图的时候

91
00:04:47.840 --> 00:04:50.570
每个图都会有各自的标题 它可以告诉我图中有哪两个变量

92
00:04:50.570 --> 00:04:53.400
第一个是 “Ozone and Wind” 第二个是 "Ozone and Solar Radiation"

93
00:04:53.400 --> 00:04:56.490
而第三个是 "Ozone and Temperature"

94
00:04:56.490 --> 00:04:58.660
但有时你会想要用一个标签

95
00:04:58.660 --> 00:05:02.550
来概括面板上所有的图

96
00:05:02.550 --> 00:05:04.210
这就是外边距的作用

97
00:05:04.210 --> 00:05:08.920
在这里我设置了 mfrow 参数为一行三列

98
00:05:08.920 --> 00:05:10.600
我将内边距设置得比缺省值小一些

99
00:05:10.600 --> 00:05:13.910
而将外边距设置得比缺省值大

100
00:05:13.910 --> 00:05:16.320
而将外边距设置得比缺省值大

101
00:05:16.320 --> 00:05:18.690
实际上外边距的缺省值是四边都为0

102
00:05:18.690 --> 00:05:23.200
我想在上边距留一些空间以便添加标题

103
00:05:23.200 --> 00:05:24.880
“Ozone and Weather in New York City”

104
00:05:24.880 --> 00:05:27.330
这就是整个图形面板的标题

105
00:05:27.330 --> 00:05:30.900
然后我分三次调用 plot() 来画3个图

106
00:05:30.900 --> 00:05:36.140
接着用 mtext() 来对图形面板添加一个总标题

107
00:05:37.770 --> 00:05:40.480
以上就是对基础绘图系统的简单介绍

108
00:05:40.480 --> 00:05:44.080
说到了一些你们会用到的基础函数

109
00:05:44.080 --> 00:05:46.080
包括 plot() 和一些注释函数

110
00:05:46.080 --> 00:05:50.640
像是 abline()

111
00:05:50.640 --> 00:05:52.150
或是 points() 等等

112
00:05:52.150 --> 00:05:54.630
可以看到

113
00:05:54.630 --> 00:05:56.590
你在绘制基本图形的时候

114
00:05:56.590 --> 00:05:58.920
基本上就是通过逐个调用函数的方式来作图

115
00:05:59.970 --> 00:06:03.170
你会用许多行代码来作一个图

116
00:06:03.170 --> 00:06:06.550
这就是基本绘图的典型特征

117
00:06:06.550 --> 00:06:09.410
每个图由一个初始化函数开始

118
00:06:09.410 --> 00:06:12.730
像是 plot() 和 boxplot()

119
00:06:12.730 --> 00:06:15.000
然后调用一系列函数

120
00:06:15.000 --> 00:06:18.370
用添加点、线、文字和图例的方式对图形进行注释

121
00:06:18.370 --> 00:06:20.860
所以基础绘图系统非常灵活

122
00:06:20.860 --> 00:06:25.040
你可以自行决定图形的很多细节

123
00:06:26.100 --> 00:06:29.070
当然 如果你每次都要逐个设置参数 那确实会有些麻烦

124
00:06:29.070 --> 00:06:33.230
而通常情况下缺省值就挺好的

125
00:06:34.270 --> 00:06:36.510
但灵活性还是非常有用的

126
00:06:36.510 --> 00:06:39.960
如果你想制作出具有出版物质量的图

127
00:06:39.960 --> 00:06:44.140
能有这样的掌控度就非常不错

128
00:06:44.140 --> 00:06:49.220
像是对图例和空间的管理等等

129
00:06:49.220 --> 00:06:52.160
这就是基础绘图系统

130
00:06:52.160 --> 00:06:54.700
我们会在其他视频中说到其他的绘图系统
【教育无边界字幕组】Shintheair | 卡卡 | LennyBear